app:
  description: ''
  icon: 🤖
  icon_background: '#FFEAD5'
  mode: workflow
  name: alert simple root cause analysis
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: package
  value:
    plugin_unique_identifier: langgenius/deepseek:0.0.5@fd6efd37c2a931911de8ab9ca3ba2da303bef146d45ee87ad896b04b36d09403
kind: app
version: 0.1.5
workflow:
  conversation_variables: []
  environment_variables: []
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: iteration-start
        targetType: code
      id: 1741497176064start-source-1741497181784-target
      selected: false
      source: 1741497176064start
      sourceHandle: source
      target: '1741497181784'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: false
        sourceType: iteration
        targetType: llm
      id: 1741497176064-source-1741512806512-target
      selected: false
      source: '1741497176064'
      sourceHandle: source
      target: '1741512806512'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: end
      id: 1741512806512-source-1741502839759-target
      selected: false
      source: '1741512806512'
      sourceHandle: source
      target: '1741502839759'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: template-transform
        targetType: end
      id: 1741592094819-source-1741592144815-target
      selected: false
      source: '1741592094819'
      sourceHandle: source
      target: '1741592144815'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: variable-aggregator
        targetType: code
      id: 1741597274153-source-1741509454645-target
      selected: false
      source: '1741597274153'
      sourceHandle: source
      target: '1741509454645'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: variable-aggregator
      id: 1741597223833-source-1741597274153-target
      selected: false
      source: '1741597223833'
      sourceHandle: source
      target: '1741597274153'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: variable-aggregator
      id: 1741599658821-source-1741597274153-target
      selected: false
      source: '1741599658821'
      sourceHandle: source
      target: '1741597274153'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: template-transform
      id: 1742453019576-false-1741592094819-target
      selected: false
      source: '1742453019576'
      sourceHandle: 'false'
      target: '1741592094819'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: code
      id: 1742453019576-true-1741599658821-target
      selected: false
      source: '1742453019576'
      sourceHandle: 'true'
      target: '1741599658821'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: tool
      id: 1742453019576-2949ad86-bdc0-4b1d-bd84-6e01f41915eb-1741597223833-target
      selected: false
      source: '1742453019576'
      sourceHandle: 2949ad86-bdc0-4b1d-bd84-6e01f41915eb
      target: '1741597223833'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: question-classifier
        targetType: llm
      id: 1742461755094-1742463856746-1742468652489-target
      selected: false
      source: '1742461755094'
      sourceHandle: '1742463856746'
      target: '1742468652489'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: llm
        targetType: variable-aggregator
      id: 1741506766037-source-1742470455066-target
      selected: false
      source: '1741506766037'
      sourceHandle: source
      target: '1742470455066'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: llm
        targetType: variable-aggregator
      id: 1742468584059-source-1742470455066-target
      selected: false
      source: '1742468584059'
      sourceHandle: source
      target: '1742470455066'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: llm
        targetType: variable-aggregator
      id: 1742468652489-source-1742470455066-target
      selected: false
      source: '1742468652489'
      sourceHandle: source
      target: '1742470455066'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: tool
      id: 1742453019576-74dc1f70-729f-47e1-a6c8-9f0a1d2a6ad9-1742629595400-target
      selected: false
      source: '1742453019576'
      sourceHandle: 74dc1f70-729f-47e1-a6c8-9f0a1d2a6ad9
      target: '1742629595400'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: variable-aggregator
      id: 1742629595400-source-1741597274153-target
      selected: false
      source: '1742629595400'
      sourceHandle: source
      target: '1741597274153'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: start
        targetType: code
      id: 1741227526517-source-1742807803325-target
      selected: false
      source: '1741227526517'
      sourceHandle: source
      target: '1742807803325'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: if-else
      id: 1742807803325-source-1742453019576-target
      selected: false
      source: '1742807803325'
      sourceHandle: source
      target: '1742453019576'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: question-classifier
      id: 1741497181784-source-1742461755094-target
      selected: false
      source: '1741497181784'
      sourceHandle: source
      target: '1742461755094'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: question-classifier
        targetType: tool
      id: 1742461755094-1742464231696-1742980720651-target
      selected: false
      source: '1742461755094'
      sourceHandle: '1742464231696'
      target: '1742980720651'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: question-classifier
        targetType: tool
      id: 1742461755094-1742464231696-1742980748320-target
      selected: false
      source: '1742461755094'
      sourceHandle: '1742464231696'
      target: '1742980748320'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: question-classifier
        targetType: tool
      id: 1742461755094-1742464231696-1742980780865-target
      selected: false
      source: '1742461755094'
      sourceHandle: '1742464231696'
      target: '1742980780865'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: question-classifier
        targetType: tool
      id: 1742461755094-1742464231696-1742980837261-target
      selected: false
      source: '1742461755094'
      sourceHandle: '1742464231696'
      target: '1742980837261'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: question-classifier
        targetType: tool
      id: 1742461755094-1742464231696-1742980885557-target
      selected: false
      source: '1742461755094'
      sourceHandle: '1742464231696'
      target: '1742980885557'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: tool
      id: 1742980720651-source-1742980228913-target
      selected: false
      source: '1742980720651'
      sourceHandle: source
      target: '1742980228913'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: tool
      id: 1742980748320-source-1742980318484-target
      selected: false
      source: '1742980748320'
      sourceHandle: source
      target: '1742980318484'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: tool
      id: 1742980780865-source-1742547917612-target
      selected: false
      source: '1742980780865'
      sourceHandle: source
      target: '1742547917612'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: tool
      id: 1742980837261-source-1742798505742-target
      selected: false
      source: '1742980837261'
      sourceHandle: source
      target: '1742798505742'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: tool
      id: 1742980885557-source-1741502699500-target
      selected: false
      source: '1742980885557'
      sourceHandle: source
      target: '1741502699500'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1741509454645-source-17430589567120-target
      selected: false
      source: '1741509454645'
      sourceHandle: source
      target: '17430589567120'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: question-classifier
        targetType: tool
      id: 1742461755094-1742462167200-1743059090157-target
      selected: false
      source: '1742461755094'
      sourceHandle: '1742462167200'
      target: '1743059090157'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: llm
      id: 1743059090157-source-1742468584059-target
      selected: false
      source: '1743059090157'
      sourceHandle: source
      target: '1742468584059'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: tool
      id: 17430590082510-1742462167200-17430593614550-target
      selected: false
      source: '17430590082510'
      sourceHandle: '1742462167200'
      target: '17430593614550'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: llm
      id: 17430593614550-source-17430593816310-target
      selected: false
      source: '17430593614550'
      sourceHandle: source
      target: '17430593816310'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: variable-aggregator
      id: 17430593816310-source-17430594012660-target
      selected: false
      source: '17430593816310'
      sourceHandle: source
      target: '17430594012660'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: llm
      id: 17430590082510-1742463856746-17430594510140-target
      selected: false
      source: '17430590082510'
      sourceHandle: '1742463856746'
      target: '17430594510140'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: variable-aggregator
        targetType: iteration
      id: 17430594012660-source-1741497176064-target
      selected: false
      source: '17430594012660'
      sourceHandle: source
      target: '1741497176064'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 17430595109950-source-17430595158080-target
      selected: false
      source: '17430595109950'
      sourceHandle: source
      target: '17430595158080'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: variable-aggregator
      id: 17430596469370-source-17430594012660-target
      selected: false
      source: '17430596469370'
      sourceHandle: source
      target: '17430594012660'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 17430597987060-source-17430598152780-target
      selected: false
      source: '17430597987060'
      sourceHandle: source
      target: '17430598152780'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 17430598907140-source-17430598942980-target
      selected: false
      source: '17430598907140'
      sourceHandle: source
      target: '17430598942980'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: tool
      id: 17430590082510-1742464231696-17430610599980-target
      selected: false
      source: '17430590082510'
      sourceHandle: '1742464231696'
      target: '17430610599980'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 17430610599980-source-17430610640640-target
      selected: false
      source: '17430610599980'
      sourceHandle: source
      target: '17430610640640'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 17430610719970-source-17430610756270-target
      selected: false
      source: '17430610719970'
      sourceHandle: source
      target: '17430610756270'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 17430595158080-source-1743149089034-target
      selected: false
      source: '17430595158080'
      sourceHandle: source
      target: '1743149089034'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 17430610756270-source-17431493682530-target
      selected: false
      source: '17430610756270'
      sourceHandle: source
      target: '17431493682530'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: tool
      id: 17430598152780-source-17431493591600-target
      selected: false
      source: '17430598152780'
      sourceHandle: source
      target: '17431493591600'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: tool
      id: 1742980228913-source-1743149606391-target
      selected: false
      source: '1742980228913'
      sourceHandle: source
      target: '1743149606391'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: tool
      id: 1742980318484-source-1743152043813-target
      selected: false
      source: '1742980318484'
      sourceHandle: source
      target: '1743152043813'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: tool
      id: 1741502699500-source-1743152169252-target
      selected: false
      source: '1741502699500'
      sourceHandle: source
      target: '1743152169252'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: false
        sourceType: code
        targetType: question-classifier
      id: 17430589567120-source-17430590082510-target
      selected: false
      source: '17430589567120'
      sourceHandle: source
      target: '17430590082510'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: variable-aggregator
      id: 17430594510140-source-17430594012660-target
      selected: false
      source: '17430594510140'
      sourceHandle: source
      target: '17430594012660'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: code
      id: 1743149089034-source-1744185676164-target
      selected: false
      source: '1743149089034'
      sourceHandle: source
      target: '1744185676164'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: code
      id: 17431493591600-source-17441926182400-target
      selected: false
      source: '17431493591600'
      sourceHandle: source
      target: '17441926182400'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: code
      id: 17431493623970-source-17441926217060-target
      selected: false
      source: '17431493623970'
      sourceHandle: source
      target: '17441926217060'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: code
      id: 17431493655610-source-17441926243210-target
      selected: false
      source: '17431493655610'
      sourceHandle: source
      target: '17441926243210'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: code
      id: 17431493682530-source-17441926286390-target
      selected: false
      source: '17431493682530'
      sourceHandle: source
      target: '17441926286390'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: code
      id: 1743149606391-source-1744206107700-target
      selected: false
      source: '1743149606391'
      sourceHandle: source
      target: '1744206107700'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: code
      id: 1743152043813-source-1744206199211-target
      selected: false
      source: '1743152043813'
      sourceHandle: source
      target: '1744206199211'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: code
      id: 1743150910103-source-1744206249528-target
      selected: false
      source: '1743150910103'
      sourceHandle: source
      target: '1744206249528'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: code
      id: 1743152103020-source-1744206286177-target
      selected: false
      source: '1743152103020'
      sourceHandle: source
      target: '1744206286177'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: code
      id: 1743152169252-source-1744206314118-target
      selected: false
      source: '1743152169252'
      sourceHandle: source
      target: '1744206314118'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: false
        sourceType: tool
        targetType: code
      id: 17430610640640-source-1744255998058-target
      selected: false
      source: '17430610640640'
      sourceHandle: source
      target: '1744255998058'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: tool
      id: 1744255998058-source-17431493655610-target
      selected: false
      source: '1744255998058'
      sourceHandle: source
      target: '17431493655610'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: code
      id: 17430598942980-source-17442560822670-target
      selected: false
      source: '17430598942980'
      sourceHandle: source
      target: '17442560822670'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: tool
      id: 17442560822670-source-17431493623970-target
      selected: false
      source: '17442560822670'
      sourceHandle: source
      target: '17431493623970'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 17441926243210-source-1744287265980-target
      selected: false
      source: '17441926243210'
      sourceHandle: source
      target: '1744287265980'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1744287265980-source-1744290470304-target
      selected: false
      source: '1744287265980'
      sourceHandle: source
      target: '1744290470304'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: tool
      id: 17430590082510-1742464231696-17430595109950-target
      selected: false
      source: '17430590082510'
      sourceHandle: '1742464231696'
      target: '17430595109950'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: tool
      id: 17430590082510-1742464231696-17430597987060-target
      selected: false
      source: '17430590082510'
      sourceHandle: '1742464231696'
      target: '17430597987060'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: tool
      id: 17430590082510-1742464231696-17430598907140-target
      selected: false
      source: '17430590082510'
      sourceHandle: '1742464231696'
      target: '17430598907140'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: tool
      id: 17430590082510-1742464231696-17430610719970-target
      selected: false
      source: '17430590082510'
      sourceHandle: '1742464231696'
      target: '17430610719970'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 17441926286390-source-17443356883380-target
      selected: false
      source: '17441926286390'
      sourceHandle: source
      target: '17443356883380'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 17441926217060-source-17443357536900-target
      selected: false
      source: '17441926217060'
      sourceHandle: source
      target: '17443357536900'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 17441926182400-source-17443357893440-target
      selected: false
      source: '17441926182400'
      sourceHandle: source
      target: '17443357893440'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1744185676164-source-17443357899060-target
      selected: false
      source: '1744185676164'
      sourceHandle: source
      target: '17443357899060'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 17443357899060-source-17443388433580-target
      selected: false
      source: '17443357899060'
      sourceHandle: source
      target: '17443388433580'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 17443388433580-source-17430596469370-target
      selected: false
      source: '17443388433580'
      sourceHandle: source
      target: '17430596469370'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 17443357893440-source-17443388421360-target
      selected: false
      source: '17443357893440'
      sourceHandle: source
      target: '17443388421360'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 17443388421360-source-17430596469370-target
      selected: false
      source: '17443388421360'
      sourceHandle: source
      target: '17430596469370'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 17443357536900-source-17443388438160-target
      selected: false
      source: '17443357536900'
      sourceHandle: source
      target: '17443388438160'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 17443388438160-source-17430596469370-target
      selected: false
      source: '17443388438160'
      sourceHandle: source
      target: '17430596469370'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 17443356883380-source-17443388443000-target
      selected: false
      source: '17443356883380'
      sourceHandle: source
      target: '17443388443000'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 17443388443000-source-17430596469370-target
      selected: false
      source: '17443388443000'
      sourceHandle: source
      target: '17430596469370'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 1744290470304-source-17430596469370-target
      selected: false
      source: '1744290470304'
      sourceHandle: source
      target: '17430596469370'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: code
      id: 1742798505742-source-1744342068305-target
      selected: false
      source: '1742798505742'
      sourceHandle: source
      target: '1744342068305'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: tool
      id: 1744342068305-source-1743152103020-target
      selected: false
      source: '1744342068305'
      sourceHandle: source
      target: '1743152103020'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: tool
        targetType: code
      id: 1742547917612-source-1744342138380-target
      selected: false
      source: '1742547917612'
      sourceHandle: source
      target: '1744342138380'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: tool
      id: 1744342138380-source-1743150910103-target
      selected: false
      source: '1744342138380'
      sourceHandle: source
      target: '1743150910103'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: code
      id: 1744206107700-source-1744342244843-target
      selected: false
      source: '1744206107700'
      sourceHandle: source
      target: '1744342244843'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: code
      id: 1744206199211-source-1744342309386-target
      selected: false
      source: '1744206199211'
      sourceHandle: source
      target: '1744342309386'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: code
      id: 1744206249528-source-1744342372882-target
      selected: false
      source: '1744206249528'
      sourceHandle: source
      target: '1744342372882'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: code
      id: 1744206286177-source-1744342426374-target
      selected: false
      source: '1744206286177'
      sourceHandle: source
      target: '1744342426374'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: code
      id: 1744206314118-source-1744342478278-target
      source: '1744206314118'
      sourceHandle: source
      target: '1744342478278'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: code
      id: 1744342478278-source-1744342609856-target
      source: '1744342478278'
      sourceHandle: source
      target: '1744342609856'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: llm
      id: 1744342609856-source-1741506766037-target
      source: '1744342609856'
      sourceHandle: source
      target: '1741506766037'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: code
      id: 1744342426374-source-1744342800777-target
      source: '1744342426374'
      sourceHandle: source
      target: '1744342800777'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: llm
      id: 1744342800777-source-1741506766037-target
      source: '1744342800777'
      sourceHandle: source
      target: '1741506766037'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: code
      id: 1744342372882-source-1744342846753-target
      source: '1744342372882'
      sourceHandle: source
      target: '1744342846753'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: llm
      id: 1744342846753-source-1741506766037-target
      source: '1744342846753'
      sourceHandle: source
      target: '1741506766037'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: code
      id: 1744342309386-source-1744342890395-target
      source: '1744342309386'
      sourceHandle: source
      target: '1744342890395'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: llm
      id: 1744342890395-source-1741506766037-target
      source: '1744342890395'
      sourceHandle: source
      target: '1741506766037'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: code
      id: 1744342244843-source-1744342920172-target
      source: '1744342244843'
      sourceHandle: source
      target: '1744342920172'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1741497176064'
        sourceType: code
        targetType: llm
      id: 1744342920172-source-1741506766037-target
      source: '1744342920172'
      sourceHandle: source
      target: '1741506766037'
      targetHandle: target
      type: custom
      zIndex: 1002
    nodes:
    - data:
        desc: ''
        selected: false
        title: start
        type: start
        variables:
        - label: startTime
          max_length: 48
          options: []
          required: true
          type: number
          variable: startTime
        - label: endTime
          max_length: 48
          options: []
          required: true
          type: number
          variable: endTime
        - label: params
          max_length: 9999999
          options: []
          required: false
          type: paragraph
          variable: params
        - label: nodeName
          max_length: 256
          options: []
          required: false
          type: text-input
          variable: nodeName
        - label: nodeIp
          max_length: 48
          options: []
          required: false
          type: text-input
          variable: nodeIp
      height: 193
      id: '1741227526517'
      position:
        x: 30
        y: 444
      positionAbsolute:
        x: 30
        y: 444
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        error_handle_mode: terminated
        height: 1408
        is_parallel: false
        iterator_selector:
        - '1741509454645'
        - monitor
        output_selector:
        - '1742470455066'
        - output
        output_type: array[string]
        parallel_nums: 10
        selected: false
        start_node_id: 1741497176064start
        title: iteration
        type: iteration
        width: 6503.360125927147
      height: 1408
      id: '1741497176064'
      position:
        x: 5262.456277280085
        y: 916
      positionAbsolute:
        x: 5262.456277280085
        y: 916
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 6503
      zIndex: 1
    - data:
        desc: ''
        isInIteration: true
        selected: false
        title: ''
        type: iteration-start
      draggable: false
      height: 48
      id: 1741497176064start
      parentId: '1741497176064'
      position:
        x: 24
        y: 68
      positionAbsolute:
        x: 5286.456277280085
        y: 984
      selectable: false
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom-iteration-start
      width: 44
      zIndex: 1002
    - data:
        code: "\ndef main(arg1: str) -> dict:\n    data = json.loads(arg1)\n    return\
          \ {\n        \"pod\": data.get(\"pod\", \"\"),\n        \"namespace\": data.get(\"\
          namespace\", \"\")\n    }\n"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          namespace:
            children: null
            type: string
          pod:
            children: null
            type: string
        selected: false
        title: get instance info
        type: code
        variables:
        - value_selector:
          - '1741497176064'
          - item
          variable: arg1
      height: 53
      id: '1741497181784'
      parentId: '1741497176064'
      position:
        x: 247.70722025930104
        y: 65
      positionAbsolute:
        x: 5510.163497539385
        y: 981
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified pod name
            ja_JP: Specified pod name
            pt_BR: Specified pod name
            zh_Hans: 指定的容器POD名称
          label:
            en_US: pod
            ja_JP: pod
            pt_BR: pod
            zh_Hans: pod
          llm_description: Specified pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified namespace
            ja_JP: Specified namespace
            pt_BR: Specified namespace
            zh_Hans: 指定的容器所在Namespace
          label:
            en_US: namespace
            ja_JP: namespace
            pt_BR: namespace
            zh_Hans: namespace
          llm_description: Specified namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time
            ja_JP: Data query start time
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time
            ja_JP: Data query end time
            pt_BR: Data query end time
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query start time
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: Container CPU throttling duration (when using Containerd container
          runtime, statistics by container and Pod)
        tool_configurations: {}
        tool_label: 容器CPU节流时长(使用Containerd容器运行时,按容器和Pod统计)
        tool_name: 容器CPU节流时长(使用Containerd容器运行时,按容器和Pod统计)
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#1741497181784.namespace#}}'
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1741502699500'
      parentId: '1741497176064'
      position:
        x: 844.0068118865438
        y: 800.2561082923241
      positionAbsolute:
        x: 6106.463089166628
        y: 1716.2561082923241
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1741512806512'
          - text
          variable: text
        - value_selector: []
          variable: ''
        selected: false
        title: End
        type: end
      height: 89
      id: '1741502839759'
      position:
        x: 12255
        y: 916
      positionAbsolute:
        x: 12255
        y: 916
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        model:
          completion_params:
            temperature: 0.6
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: cd35fff4-a037-4e72-af99-2ff8299fc5d2
          role: system
          text: You are an intelligent assistant in the observability field, helping
            users analyze problems
        - id: 2b2ad468-efcd-4bcc-aeb9-d53d2f2770ad
          role: user
          text: '​​# Objective​​

            Analyze whether application {{#17430589567120.pod#}} is impacted by alert
            event {{#1742807803325.alertName#}} based on anomaly thread data across
            resource categories, and perform preliminary root cause attribution.


            ​​# Input Data Specifications​​


            ​​Per-category data​​ includes thread latency and associated North Star
            metrics (e.g., network RTT for network-related latency).

            ​​Anomaly data point count​​: Number of instances where latency exceeds
            20% of the historical average for the same thread type. The average value
            of the thread.

            ​​# Analysis Rules​​


            ​​Identify Primary Anomaly Direction​​

            Give the average value of the abnormal thread.

            Determine the resource type with the ​​most significant latency increase​​
            (e.g., values elevated to ​​second-level magnitudes​​ instead of milliseconds).

            Prioritize ​​thread count analysis​​: If a resource type (e.g., network/epoll)
            has the highest number of anomalous threads, attribute the root cause
            to that category.

            Example: 4 threads with network/epoll anomalies vs. 2 CPU threads → classify
            as ​​network issue​​.

            ​​Avoid Misclassification​​

            If ​​CPU​​ or ​​runQ​​ latency spikes dominate (with no concurrent network/epoll
            anomalies), attribute to ​​CPU contention​​ instead of network.

            ​​Tiebreaker Priority​​ (Descending Order):

            ​​CPU > Network > Epoll > File > RunQ​​.

            ​​# Root Cause Attribution & Recommendations​​


            ​​CPU Latency Surge​​:

            Check for code over-nesting; perform rollback if confirmed.

            ​​High CPU Preemption​​:

            Investigate resource contention from co-located processes.

            ​​Network/Epoll Latency Surge​​:

            The net/epoll type data might include a summary about RTT.

            If RTT is abnormal → troubleshoot network; RTT normal → inspect downstream
            services.

            ​​File Latency Increase​​:

            Audit excessive file handles.

            ​​# Output Format​​

            ​​Application​​: {{#17430589567120.pod#}}

            ​​North Star Metric Trends Summary​​


            Summarize significant changes per metric.

            If no anomalies: "No observable deviations."

            ​​Preliminary Root Cause Conclusion​​


            State whether the alert impacts the application.

            Provide ​​single-direction attribution​​ based on North Star metrics and
            analysis rules.

            Note: If network/epoll is suspected with normal RTT, attribute to ​​downstream
            service latency​​.

            ​​# Input Data​​


            ​​CPU​​: {{#17443388433580.result#}}

            ​​Network​​: {{#17443388438160.result#}}

            ​​File​​: {{#17443388421360.result#}}

            ​​Epoll​​: {{#1744290470304.result#}}

            ​​RunQ​​: {{#17443388443000.result#}}

            ​​# Guidelines​​


            Use concise, non-technical language for readability.

            Avoid ambiguous terms; prioritize actionable insights.

            '
        selected: false
        title: llm analysis root cause
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1741506766037'
      parentId: '1741497176064'
      position:
        x: 3100.843852684703
        y: 613.2233202711288
      positionAbsolute:
        x: 8363.300129964788
        y: 1529.2233202711288
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\ndef main(arg: str) -> dict:\n    data = json.loads(arg)\n\
          \    timeseries = data[\"data\"][\"timeseries\"]\n    \n    seen = set()\n\
          \    pod_info = []\n    first_pod = None\n    \n    for item in timeseries:\n\
          \        labels = item[\"labels\"]\n        namespace = labels.get(\"namespace\"\
          , \"\")\n        pod = labels.get(\"pod\", \"\")\n \n        unique_key\
          \ = (namespace, pod)\n        \n        if unique_key not in seen:\n   \
          \         seen.add(unique_key)\n            info = {\n                \"\
          namespace\": namespace,\n                \"pod\": pod\n            }\n \
          \           if first_pod is None:\n                first_pod = json.dumps(info)\n\
          \            else:\n              pod_info.append(json.dumps(info))\n  \
          \          \n    return {\n        \"first\": first_pod,\n        \"monitor\"\
          : pod_info,\n    }"
        code_language: python3
        desc: ''
        outputs:
          first:
            children: null
            type: string
          monitor:
            children: null
            type: array[string]
        selected: false
        title: ' get pod info array'
        type: code
        variables:
        - value_selector:
          - '1741597274153'
          - output
          variable: arg
      height: 53
      id: '1741509454645'
      position:
        x: 1545
        y: 628
      positionAbsolute:
        x: 1545
        y: 628
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        model:
          completion_params:
            temperature: 0.6
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: 169877de-aa4a-44db-90ef-2cc8f68882c4
          role: system
          text: You are an intelligent assistant in the field of observability
        - id: c9d29276-dfa5-4042-b1c6-562260f9cc7c
          role: user
          text: '# Purpose

            Summarize the Pod information in the conclusion data by service level
            and output a service level overview.

            The specific situation of each Pod should be clear and easy to understand.

            Remove suggestions related to futex.

            # Note

            1. In the conclusion, if the impact of CPU-related problems is more significant
            (combined with alarm events), it is recommended that users prioritize
            solving CPU problems.

            2. Optimize the output format to ensure that the service level summary
            and Pod details are clearly layered and easy to read.

            4. The names of North Star indicators (such as CPU, epoll, net, other/runq)
            must not be changed.

            5. When outputting conclusions, only one direction is required, and do
            not associate them with other problems (such as GC and locks)

            6. If the net time consumption increases, but the RTT is normal, it is
            recommended that users check downstream problems

            # Conclusion data

            {{#17430594012660.output#}}

            {{#1741497176064.output#}}'
        selected: false
        title: summary data
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1741512806512'
      position:
        x: 11884
        y: 916
      positionAbsolute:
        x: 11884
        y: 916
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        selected: false
        template: The service and node information are both empty. The root cause
          cannot be analyzed at present.
        title: unsupport alert
        type: template-transform
        variables: []
      height: 53
      id: '1741592094819'
      position:
        x: 939
        y: 444
      positionAbsolute:
        x: 939
        y: 444
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1741592094819'
          - output
          variable: output
        selected: false
        title: End
        type: end
      height: 89
      id: '1741592144815'
      position:
        x: 1242
        y: 444
      positionAbsolute:
        x: 1242
        y: 444
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        is_team_authorization: true
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified service name
            ja_JP: Specified service name
            pt_BR: Specified service name
            zh_Hans: 指定的服务名
          label:
            en_US: service_name
            ja_JP: service_name
            pt_BR: service_name
            zh_Hans: service_name
          llm_description: Specified service name
          max: null
          min: null
          name: service_name
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time
            ja_JP: Data query start time
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time
            ja_JP: Data query end time
            pt_BR: Data query end time
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query start time
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          service_name: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: query pod info by service
        tool_configurations: {}
        tool_label: 列出该服务下的所有实例
        tool_name: originx_service_instance
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          service_name:
            type: mixed
            value: '{{#1742807803325.service#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1741597223833'
      position:
        x: 939
        y: 536
      positionAbsolute:
        x: 939
        y: 536
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        output_type: string
        selected: false
        title: summary instance
        type: variable-aggregator
        variables:
        - - '1741597223833'
          - text
        - - '1741599658821'
          - result
        - - '1742629595400'
          - text
      height: 150
      id: '1741597274153'
      position:
        x: 1242
        y: 596.5
      positionAbsolute:
        x: 1242
        y: 596.5
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "\ndef main(arg1: str, arg2: str) -> dict:\n    data = {\n        \"\
          data\": {\n            \"timeseries\": [\n                {\n          \
          \          \"labels\": {\n                        \"namespace\": arg2,\n\
          \                        \"pod\": arg1,\n                    }\n       \
          \         }\n            ]\n        }\n    }\n    return {\n        \"result\"\
          : json.dumps(data),\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: get pod info
        type: code
        variables:
        - value_selector:
          - '1742807803325'
          - pod
          variable: arg1
        - value_selector:
          - '1742807803325'
          - namespace
          variable: arg2
      height: 53
      id: '1741599658821'
      position:
        x: 939
        y: 628
      positionAbsolute:
        x: 939
        y: 628
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: not empty
            id: 22866ae7-2bfa-47e9-9c19-d31e8b63001f
            value: ''
            varType: string
            variable_selector:
            - '1742807803325'
            - pod
          - comparison_operator: not empty
            id: add89997-787b-4d71-a187-3e9f8e8f25a3
            value: ''
            varType: string
            variable_selector:
            - '1742807803325'
            - namespace
          id: 'true'
          logical_operator: and
        - case_id: 2949ad86-bdc0-4b1d-bd84-6e01f41915eb
          conditions:
          - comparison_operator: not empty
            id: 4dbbe62a-669f-4549-9028-c4ccd6c8175c
            value: ''
            varType: string
            variable_selector:
            - '1742807803325'
            - service
          id: 2949ad86-bdc0-4b1d-bd84-6e01f41915eb
          logical_operator: and
        - case_id: 74dc1f70-729f-47e1-a6c8-9f0a1d2a6ad9
          conditions:
          - comparison_operator: not empty
            id: a2f849d6-0c4f-40f0-9c91-f37cf81eb3f5
            value: ''
            varType: string
            variable_selector:
            - '1741227526517'
            - nodeName
          id: 74dc1f70-729f-47e1-a6c8-9f0a1d2a6ad9
          logical_operator: and
        desc: ''
        selected: false
        title: alert instance info
        type: if-else
      height: 247
      id: '1742453019576'
      position:
        x: 636
        y: 444
      positionAbsolute:
        x: 636
        y: 444
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        classes:
        - id: '1742462167200'
          name: 'container

            memory'
        - id: '1742463856746'
          name: 'event type

            container was killed'
        - id: '1742464231696'
          name: unknow
        desc: ''
        instruction: You are an intelligent alert classification assistant. Your task
          is to classify the given alert events.
        instructions: ''
        isInIteration: true
        iteration_id: '1741497176064'
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        query_variable_selector:
        - '1742807803325'
        - alertName
        selected: false
        title: alert event
        topics: []
        type: question-classifier
        vision:
          enabled: false
      height: 203
      id: '1742461755094'
      parentId: '1741497176064'
      position:
        x: 76.97060259216505
        y: 363.9210031388636
      positionAbsolute:
        x: 5339.42687987225
        y: 1279.9210031388636
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: 25386b5d-4509-477b-bdab-d835cd12b104
          role: system
          text: You are an intelligent assistant in the observability field, helping
            users analyze problems
        - id: 5f74b2ce-6208-423b-aa3b-f01f2cafb89b
          role: user
          text: '# Purpose


            Current pod: {{#1741497181784.pod#}})


            Due to the increase in memory alarm, it is necessary to analyze the cause
            and provide a solution.

            # Output requirements

            Show the trend of memory indicator data (describe in simple language so
            that people can understand it at a glance).

            Provide relevant suggestions, including:

            Check whether the code may have memory leaks.

            Practical methods such as analyzing the root cause of the problem through
            logs.

            # Data source


            Container memory data: {{#1743059090157.text#}}.'
        selected: false
        title: memory anlysis
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1742468584059'
      parentId: '1741497176064'
      position:
        x: 1013.1944929957504
        y: 157.34078070824808
      positionAbsolute:
        x: 6275.650770275835
        y: 1073.340780708248
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: 893c9a67-e9e3-4c2c-8ed2-6301998d555b
          role: system
          text: You are an intelligent assistant in the observability field, helping
            users analyze problems
        - id: ccfb4eb1-f253-415d-9a60-9ecab7bd6af4
          role: user
          text: 'This alert event is an event type

            affecting {{#1741497181784.pod#}}, give some suggestions'
        selected: false
        title: LLM 4
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1742468652489'
      parentId: '1741497176064'
      position:
        x: 535.2725275358107
        y: 237.25999906213883
      positionAbsolute:
        x: 5797.728804815895
        y: 1153.2599990621388
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        output_type: string
        selected: false
        title: summary
        type: variable-aggregator
        variables:
        - - '1741506766037'
          - text
        - - '1742468584059'
          - text
        - - '1742468652489'
          - text
      height: 150
      id: '1742470455066'
      parentId: '1741497176064'
      position:
        x: 6244.360125927147
        y: 216.75503228886544
      positionAbsolute:
        x: 11506.81640320723
        y: 1132.7550322888656
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified pod name
            ja_JP: Specified pod name
            pt_BR: Specified pod name
            zh_Hans: 指定的容器POD名称
          label:
            en_US: pod
            ja_JP: pod
            pt_BR: pod
            zh_Hans: pod
          llm_description: Specified pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified namespace
            ja_JP: Specified namespace
            pt_BR: Specified namespace
            zh_Hans: 指定的容器所在Namespace
          label:
            en_US: namespace
            ja_JP: namespace
            pt_BR: namespace
            zh_Hans: namespace
          llm_description: Specified namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time
            ja_JP: Data query start time
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time
            ja_JP: Data query end time
            pt_BR: Data query end time
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query start time
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: Query container rtt
        tool_configurations: {}
        tool_label: Query container rtt
        tool_name: 查询容器网络与下游RTT
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#1741497181784.namespace#}}'
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1742547917612'
      parentId: '1741497176064'
      position:
        x: 837.913049217997
        y: 567.6173152328563
      positionAbsolute:
        x: 6100.369326498081
        y: 1483.6173152328563
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        is_team_authorization: true
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified node name
            ja_JP: Specified node name
            pt_BR: Specified pod name
            zh_Hans: 指定的主机名称
          label:
            en_US: node_name
            ja_JP: node_name
            pt_BR: node_name
            zh_Hans: node_name
          llm_description: Specified pod name
          max: null
          min: null
          name: node_name
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified Process ID
            ja_JP: Specified Process ID
            pt_BR: Specified Process ID
            zh_Hans: 指定的进程ID
          label:
            en_US: pid
            ja_JP: pid
            pt_BR: pid
            zh_Hans: pid
          llm_description: Specified Process ID
          max: null
          min: null
          name: pid
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time
            ja_JP: Data query start time
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time
            ja_JP: Data query end time
            pt_BR: Data query end time
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query start time
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          node_name: ''
          pid: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: get pod info in node
        tool_configurations: {}
        tool_label: Thread Polaris Metrics Process All monitor
        tool_name: originx_service_monitor
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          node_name:
            type: mixed
            value: '{{#1741227526517.nodeName#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1742629595400'
      position:
        x: 939
        y: 720
      positionAbsolute:
        x: 939
        y: 720
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified pod name
            ja_JP: Specified pod name
            pt_BR: Specified pod name
            zh_Hans: 指定的容器POD名称
          label:
            en_US: pod
            ja_JP: pod
            pt_BR: pod
            zh_Hans: pod
          llm_description: Specified pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified namespace
            ja_JP: Specified namespace
            pt_BR: Specified namespace
            zh_Hans: 指定的容器所在Namespace
          label:
            en_US: namespace
            ja_JP: namespace
            pt_BR: namespace
            zh_Hans: namespace
          llm_description: Specified namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time
            ja_JP: Data query start time
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time
            ja_JP: Data query end time
            pt_BR: Data query end time
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query start time
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: Query container rtt
        tool_configurations: {}
        tool_label: Query container rtt
        tool_name: 查询容器网络与下游RTT
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#1741497181784.namespace#}}'
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1742798505742'
      parentId: '1741497176064'
      position:
        x: 838.2707565556775
        y: 677.0915533804653
      positionAbsolute:
        x: 6100.727033835762
        y: 1593.0915533804653
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "  \ndef get_value(data, keys): \n  for key in keys: \n    value = data.get(key)\
          \ \n    if value is not None: \n      return value \n  return \"\" \n\n\
          import json \n\ndef main(arg: str) -> dict:\n  data = json.loads(arg) \n\
          \  return { \n  \"alertName\": get_value(data, [\"alertName\"]),      \n\
          \  \"service\": get_value(data, [\"svc_name\", \"service\"]), \n  \"endpoint\"\
          : get_value(data,[\"endpoint\", \"content_key\"]), \n  \"pod\": get_value(data,[\"\
          pod\", \"src_pod\", \"pod_name\"]), \n  \"namespace\": get_value(data,[\"\
          namespace\", \"src_namespace\"]), \n}"
        code_language: python3
        desc: ''
        outputs:
          alertName:
            children: null
            type: string
          endpoint:
            children: null
            type: string
          namespace:
            children: null
            type: string
          pod:
            children: null
            type: string
          service:
            children: null
            type: string
        selected: false
        title: get alert event label info
        type: code
        variables:
        - value_selector:
          - '1741227526517'
          - params
          variable: arg
      height: 53
      id: '1742807803325'
      position:
        x: 333
        y: 444
      positionAbsolute:
        x: 333
        y: 444
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          label:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          llm_description: cAdvisor job name
          max: null
          min: null
          name: cadvisor_job_name
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          label:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          llm_description: Namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time(Microsecond)
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          cadvisor_job_name: ''
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: Container CPU usage rate (Containerd runtime, aggregated by container
          and Pod)
        tool_configurations: {}
        tool_label: Container CPU usage rate (Containerd runtime, aggregated by container
          and Pod)
        tool_name: 容器CPU使用率(使用Containerd容器运行时,按容器和Pod统计)
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#1741497181784.namespace#}}'
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1742980228913'
      parentId: '1741497176064'
      position:
        x: 817.3433448742644
        y: 386.77445077825655
      positionAbsolute:
        x: 6079.799622154349
        y: 1302.7744507782566
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          label:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          llm_description: cAdvisor job name
          max: null
          min: null
          name: cadvisor_job_name
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          label:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          llm_description: Namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time(Microsecond)
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          cadvisor_job_name: ''
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: Container disk read time per second (Containerd runtime, aggregated
          by container and Pod)
        tool_configurations: {}
        tool_label: Container disk read time per second (Containerd runtime, aggregated
          by container and Pod)
        tool_name: 容器磁盘读取耗时每秒(使用Containerd,按Pod和容器统计)
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#1741497181784.namespace#}}'
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1742980318484'
      parentId: '1741497176064'
      position:
        x: 829.6661633624499
        y: 478.0639330308825
      positionAbsolute:
        x: 6092.1224406425345
        y: 1394.0639330308825
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: thread in CPU
        tool_configurations: {}
        tool_label: 线程在CPU上的耗时折线图（按Pod统计）
        tool_name: 线程在CPU上的耗时折线图（按Pod统计）
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1742980720651'
      parentId: '1741497176064'
      position:
        x: 514.1495817191098
        y: 381.2394319656114
      positionAbsolute:
        x: 5776.605858999194
        y: 1297.2394319656114
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: thread in file
        tool_configurations: {}
        tool_label: 线程在文件操作上的耗时折线图（按Pod统计）
        tool_name: 线程在文件操作上的耗时折线图（按Pod统计）
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1742980748320'
      parentId: '1741497176064'
      position:
        x: 502.3624003022592
        y: 478.98654261939305
      positionAbsolute:
        x: 5764.818677582343
        y: 1394.986542619393
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: thread in net
        tool_configurations: {}
        tool_label: 线程在网络操作上的耗时折线图（按Pod统计）
        tool_name: 线程在网络操作上的耗时折线图（按Pod统计）
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1742980780865'
      parentId: '1741497176064'
      position:
        x: 507.1563167397626
        y: 565.5281468443313
      positionAbsolute:
        x: 5769.612594019847
        y: 1481.5281468443313
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: thread in epoll
        tool_configurations: {}
        tool_label: 线程在Epoll操作上的耗时折线图（按Pod统计）
        tool_name: 线程在Epoll操作上的耗时折线图（按Pod统计）
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1742980837261'
      parentId: '1741497176064'
      position:
        x: 513.7505744250511
        y: 675.3340235425774
      positionAbsolute:
        x: 5776.206851705136
        y: 1591.3340235425774
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: thread in runq
        tool_configurations: {}
        tool_label: 线程在运行队列上的耗时折线图（按Pod统计）
        tool_name: 线程在运行队列上的耗时折线图（按Pod统计）
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1742980885557'
      parentId: '1741497176064'
      position:
        x: 519.4457802875913
        y: 800.367276200539
      positionAbsolute:
        x: 5781.902057567676
        y: 1716.367276200539
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "\ndef main(arg1: str) -> dict:\n    data = json.loads(arg1)\n    return\
          \ {\n        \"pod\": data.get(\"pod\", \"\"),\n        \"namespace\": data.get(\"\
          namespace\", \"\")\n    }\n"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          namespace:
            children: null
            type: string
          pod:
            children: null
            type: string
        selected: false
        title: POD info
        type: code
        variables:
        - value_selector:
          - '1741509454645'
          - first
          variable: arg1
      height: 53
      id: '17430589567120'
      position:
        x: 1848
        y: 628
      positionAbsolute:
        x: 1848
        y: 628
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        classes:
        - id: '1742462167200'
          name: 'container

            high memory'
        - id: '1742463856746'
          name: 'event type

            container was killed'
        - id: '1742464231696'
          name: unknow type
        desc: ''
        instruction: You are an intelligent alert classification assistant. Your task
          is to classify the given alert events.
        instructions: ''
        isInIteration: true
        iteration_id: '1741497176064'
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        query_variable_selector:
        - '1742807803325'
        - alertName
        selected: false
        title: alert event cls
        topics: []
        type: question-classifier
        vision:
          enabled: false
      height: 203
      id: '17430590082510'
      position:
        x: 2151
        y: 628
      positionAbsolute:
        x: 2151
        y: 628
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          label:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          llm_description: cAdvisor job name
          max: null
          min: null
          name: cadvisor_job_name
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          label:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          llm_description: Namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time(Microsecond)
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          cadvisor_job_name: ''
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: container memory
        tool_configurations: {}
        tool_label: 容器内存使用字节数(使用Containerd容器运行时,按容器和Pod统计)
        tool_name: 容器内存使用字节数(使用Containerd容器运行时,按容器和Pod统计)
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#1741497181784.namespace#}}'
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '1743059090157'
      parentId: '1741497176064'
      position:
        x: 544.0386199547656
        y: 125.67116500938346
      positionAbsolute:
        x: 5806.49489723485
        y: 1041.6711650093835
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          label:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          llm_description: cAdvisor job name
          max: null
          min: null
          name: cadvisor_job_name
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          label:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          llm_description: Namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time(Microsecond)
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          cadvisor_job_name: ''
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: container memory
        tool_configurations: {}
        tool_label: 容器内存使用字节数(使用Containerd容器运行时,按容器和Pod统计)
        tool_name: 容器内存使用字节数(使用Containerd容器运行时,按容器和Pod统计)
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#17430589567120.namespace#}}'
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430593614550'
      position:
        x: 4272
        y: 628
      positionAbsolute:
        x: 4272
        y: 628
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: 25386b5d-4509-477b-bdab-d835cd12b104
          role: system
          text: You are an intelligent assistant in the observability field, helping
            users analyze problems
        - id: 5f74b2ce-6208-423b-aa3b-f01f2cafb89b
          role: user
          text: '# Purpose


            Current pod: {{#17430589567120.pod#}})


            Due to the increase in memory alert, it is necessary to analyze the cause
            and provide a solution.

            # Output requirements

            Show the trend of memory metrics data (describe in simple language so
            that people can understand it at a glance).

            Provide relevant suggestions, including:

            Check whether the code may have memory leaks.

            Practical methods such as analyzing the root cause of the problem through
            logs.

            # Data source


            Container memory data: {{#17430593614550.text#}}.'
        selected: false
        title: memory analysis
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '17430593816310'
      position:
        x: 4575
        y: 628
      positionAbsolute:
        x: 4575
        y: 628
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        output_type: string
        selected: false
        title: summary1
        type: variable-aggregator
        variables:
        - - '17430593816310'
          - text
        - - '17430594510140'
          - text
        - - '17430596469370'
          - text
      height: 150
      id: '17430594012660'
      position:
        x: 4890
        y: 908
      positionAbsolute:
        x: 4890
        y: 908
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: 893c9a67-e9e3-4c2c-8ed2-6301998d555b
          role: system
          text: You are an intelligent assistant in the observability field, helping
            users analyze problems
        - id: ccfb4eb1-f253-415d-9a60-9ecab7bd6af4
          role: user
          text: 'This alert event is an event type

            affecting {{#17430589567120.pod#}}, give some suggestions'
        selected: false
        title: event type
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '17430594510140'
      position:
        x: 4575
        y: 1144
      positionAbsolute:
        x: 4575
        y: 1144
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: thread time consumption on CPU (by Pod)
        tool_configurations: {}
        tool_label: 线程在CPU上的耗时折线图（按Pod统计）
        tool_name: 线程在CPU上的耗时折线图（按Pod统计）
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430595109950'
      position:
        x: 2757
        y: 720
      positionAbsolute:
        x: 2757
        y: 720
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          label:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          llm_description: cAdvisor job name
          max: null
          min: null
          name: cadvisor_job_name
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          label:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          llm_description: Namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time(Microsecond)
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          cadvisor_job_name: ''
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: container cpu
        tool_configurations: {}
        tool_label: Container CPU usage rate (Containerd runtime, aggregated by container
          and Pod)
        tool_name: 容器CPU使用率(使用Containerd容器运行时,按容器和Pod统计)
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#17430589567120.namespace#}}'
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430595158080'
      position:
        x: 3060
        y: 720
      positionAbsolute:
        x: 3060
        y: 720
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        model:
          completion_params:
            temperature: 0.6
          mode: chat
          name: deepseek-chat
          provider: langgenius/deepseek/deepseek
        prompt_template:
        - id: cd35fff4-a037-4e72-af99-2ff8299fc5d2
          role: system
          text: You are an intelligent assistant in the observability field, helping
            users analyze problems
        - id: 2b2ad468-efcd-4bcc-aeb9-d53d2f2770ad
          role: user
          text: '​​# Objective​​

            Analyze whether application {{#17430589567120.pod#}} is impacted by alert
            event {{#1742807803325.alertName#}} based on anomaly thread data across
            resource categories, and perform preliminary root cause attribution.


            ​​# Input Data Specifications​​


            ​​Per-category data​​ includes thread latency and associated North Star
            metrics (e.g., network RTT for network-related latency).

            ​​Anomaly data point count​​: Number of instances where latency exceeds
            20% of the historical average for the same thread type. The average value
            of the thread.

            ​​# Analysis Rules​​


            ​​Identify Primary Anomaly Direction​​

            Give the average value of the abnormal thread.

            Determine the resource type with the ​​most significant latency increase​​
            (e.g., values elevated to ​​second-level magnitudes​​ instead of milliseconds).

            Prioritize ​​thread count analysis​​: If a resource type (e.g., network/epoll)
            has the highest number of anomalous threads, attribute the root cause
            to that category.

            Example: 4 threads with network/epoll anomalies vs. 2 CPU threads → classify
            as ​​network issue​​.

            ​​Avoid Misclassification​​

            If ​​CPU​​ or ​​runQ​​ latency spikes dominate (with no concurrent network/epoll
            anomalies), attribute to ​​CPU contention​​ instead of network.

            ​​Tiebreaker Priority​​ (Descending Order):

            ​​CPU > Network > Epoll > File > RunQ​​.

            ​​# Root Cause Attribution & Recommendations​​


            ​​CPU Latency Surge​​:

            Check for code over-nesting; perform rollback if confirmed.

            ​​High CPU Preemption​​:

            Investigate resource contention from co-located processes.

            ​​Network/Epoll Latency Surge​​:

            The net/epoll type data might include a summary about RTT.

            If RTT is abnormal → troubleshoot network; RTT normal → inspect downstream
            services.

            ​​File Latency Increase​​:

            Audit excessive file handles.

            ​​# Output Format​​

            ​​Application​​: {{#17430589567120.pod#}}

            ​​North Star Metric Trends Summary​​


            Summarize significant changes per metric.

            If no anomalies: "No observable deviations."

            ​​Preliminary Root Cause Conclusion​​


            State whether the alert impacts the application.

            Provide ​​single-direction attribution​​ based on North Star metrics and
            analysis rules.

            Note: If network/epoll is suspected with normal RTT, attribute to ​​downstream
            service latency​​.

            ​​# Input Data​​


            ​​CPU​​: {{#17443388433580.result#}}

            ​​Network​​: {{#17443388438160.result#}}

            ​​File​​: {{#17443388421360.result#}}

            ​​Epoll​​: {{#1744290470304.result#}}

            ​​RunQ​​: {{#17443388443000.result#}}

            ​​# Guidelines​​


            Use concise, non-technical language for readability.

            Avoid ambiguous terms; prioritize actionable insights.

            '
        selected: false
        title: llm analysis root cause
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '17430596469370'
      position:
        x: 4575
        y: 904
      positionAbsolute:
        x: 4575
        y: 904
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: thread time consumption on File (by Pod)
        tool_configurations: {}
        tool_label: 线程在文件操作上的耗时折线图（按Pod统计）
        tool_name: 线程在文件操作上的耗时折线图（按Pod统计）
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430597987060'
      position:
        x: 2757
        y: 812
      positionAbsolute:
        x: 2757
        y: 812
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          label:
            en_US: cAdvisor job name
            ja_JP: cAdvisor job name
            pt_BR: cAdvisor job name
            zh_Hans: cAdvisor任务名称
          llm_description: cAdvisor job name
          max: null
          min: null
          name: cadvisor_job_name
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          label:
            en_US: Namespace
            ja_JP: Namespace
            pt_BR: Namespace
            zh_Hans: 命名空间
          llm_description: Namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time(Microsecond)
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          cadvisor_job_name: ''
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: container read disk
        tool_configurations: {}
        tool_label: Container disk read time per second (Containerd runtime, aggregated
          by container and Pod)
        tool_name: 容器磁盘读取耗时每秒(使用Containerd,按Pod和容器统计)
        tool_parameters:
          cadvisor_job_name:
            type: mixed
            value: ''
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#17430589567120.namespace#}}'
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430598152780'
      position:
        x: 3060
        y: 812
      positionAbsolute:
        x: 3060
        y: 812
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: Thread time consumption on Net (by Pod)
        tool_configurations: {}
        tool_label: 线程在网络操作上的耗时折线图（按Pod统计）
        tool_name: 线程在网络操作上的耗时折线图（按Pod统计）
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430598907140'
      position:
        x: 2454
        y: 904
      positionAbsolute:
        x: 2454
        y: 904
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified pod name
            ja_JP: Specified pod name
            pt_BR: Specified pod name
            zh_Hans: 指定的容器POD名称
          label:
            en_US: pod
            ja_JP: pod
            pt_BR: pod
            zh_Hans: pod
          llm_description: Specified pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified namespace
            ja_JP: Specified namespace
            pt_BR: Specified namespace
            zh_Hans: 指定的容器所在Namespace
          label:
            en_US: namespace
            ja_JP: namespace
            pt_BR: namespace
            zh_Hans: namespace
          llm_description: Specified namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time
            ja_JP: Data query start time
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time
            ja_JP: Data query end time
            pt_BR: Data query end time
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query start time
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: container rtt
        tool_configurations: {}
        tool_label: Query container rtt
        tool_name: 查询容器网络与下游RTT
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#17430589567120.namespace#}}'
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430598942980'
      position:
        x: 2757
        y: 904
      positionAbsolute:
        x: 2757
        y: 904
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: thread time consumption on Epoll (by Pod)
        tool_configurations: {}
        tool_label: 线程在Epoll操作上的耗时折线图（按Pod统计）
        tool_name: 线程在Epoll操作上的耗时折线图（按Pod统计）
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430610599980'
      position:
        x: 2454
        y: 1088
      positionAbsolute:
        x: 2454
        y: 1088
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified pod name
            ja_JP: Specified pod name
            pt_BR: Specified pod name
            zh_Hans: 指定的容器POD名称
          label:
            en_US: pod
            ja_JP: pod
            pt_BR: pod
            zh_Hans: pod
          llm_description: Specified pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified namespace
            ja_JP: Specified namespace
            pt_BR: Specified namespace
            zh_Hans: 指定的容器所在Namespace
          label:
            en_US: namespace
            ja_JP: namespace
            pt_BR: namespace
            zh_Hans: namespace
          llm_description: Specified namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time
            ja_JP: Data query start time
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time
            ja_JP: Data query end time
            pt_BR: Data query end time
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query start time
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: container rtt
        tool_configurations: {}
        tool_label: Query container rtt
        tool_name: 查询容器网络与下游RTT
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#17430589567120.namespace#}}'
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430610640640'
      position:
        x: 2757
        y: 1088
      positionAbsolute:
        x: 2757
        y: 1088
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: thread time consumption on Runq(by Pod)
        tool_configurations: {}
        tool_label: 线程在运行队列上的耗时折线图（按Pod统计）
        tool_name: 线程在运行队列上的耗时折线图（按Pod统计）
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430610719970'
      position:
        x: 2757
        y: 996
      positionAbsolute:
        x: 2757
        y: 996
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified pod name
            ja_JP: Specified pod name
            pt_BR: Specified pod name
            zh_Hans: 指定的容器POD名称
          label:
            en_US: pod
            ja_JP: pod
            pt_BR: pod
            zh_Hans: pod
          llm_description: Specified pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Specified namespace
            ja_JP: Specified namespace
            pt_BR: Specified namespace
            zh_Hans: 指定的容器所在Namespace
          label:
            en_US: namespace
            ja_JP: namespace
            pt_BR: namespace
            zh_Hans: namespace
          llm_description: Specified namespace
          max: null
          min: null
          name: namespace
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time
            ja_JP: Data query start time
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time
            ja_JP: Data query end time
            pt_BR: Data query end time
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query start time
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          namespace: ''
          pod: ''
          startTime: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: Container cpu throttling
        tool_configurations: {}
        tool_label: 容器CPU节流时长(使用Containerd容器运行时,按容器和Pod统计)
        tool_name: 容器CPU节流时长(使用Containerd容器运行时,按容器和Pod统计)
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          namespace:
            type: mixed
            value: '{{#17430589567120.namespace#}}'
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
        type: tool
      height: 53
      id: '17430610756270'
      position:
        x: 3060
        y: 996
      positionAbsolute:
        x: 3060
        y: 996
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        is_team_authorization: true
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          label:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          llm_description: Type (cpu,net,file,epoll,runq)
          max: null
          min: null
          name: type
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
          type: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: CPU P90
        tool_configurations: {}
        tool_label: Thread Polaris Metrics P90
        tool_name: 线程北极星P90数据
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
          type:
            type: mixed
            value: cpu
        type: tool
      height: 53
      id: '1743149089034'
      position:
        x: 3363
        y: 720
      positionAbsolute:
        x: 3363
        y: 720
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        is_team_authorization: true
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          label:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          llm_description: Type (cpu,net,file,epoll,runq)
          max: null
          min: null
          name: type
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
          type: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: file P90
        tool_configurations: {}
        tool_label: Thread Polaris Metrics P90
        tool_name: 线程北极星P90数据
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
          type:
            type: mixed
            value: file
        type: tool
      height: 53
      id: '17431493591600'
      position:
        x: 3363
        y: 812
      positionAbsolute:
        x: 3363
        y: 812
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        is_team_authorization: true
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          label:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          llm_description: Type (cpu,net,file,epoll,runq)
          max: null
          min: null
          name: type
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
          type: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: net P90
        tool_configurations: {}
        tool_label: Thread Polaris Metrics P90
        tool_name: 线程北极星P90数据
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
          type:
            type: mixed
            value: net
        type: tool
      height: 53
      id: '17431493623970'
      position:
        x: 3363
        y: 904
      positionAbsolute:
        x: 3363
        y: 904
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        is_team_authorization: true
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          label:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          llm_description: Type (cpu,net,file,epoll,runq)
          max: null
          min: null
          name: type
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
          type: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: epoll P90
        tool_configurations: {}
        tool_label: Thread Polaris Metrics P90
        tool_name: 线程北极星P90数据
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
          type:
            type: mixed
            value: epoll
        type: tool
      height: 53
      id: '17431493655610'
      position:
        x: 3363
        y: 1088
      positionAbsolute:
        x: 3363
        y: 1088
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        is_team_authorization: true
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          label:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          llm_description: Type (cpu,net,file,epoll,runq)
          max: null
          min: null
          name: type
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
          type: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: Runq P90
        tool_configurations: {}
        tool_label: Thread Polaris Metrics P90
        tool_name: 线程北极星P90数据
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#17430589567120.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
          type:
            type: mixed
            value: runq
        type: tool
      height: 53
      id: '17431493682530'
      position:
        x: 3363
        y: 996
      positionAbsolute:
        x: 3363
        y: 996
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          label:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          llm_description: Type (cpu,net,file,epoll,runq)
          max: null
          min: null
          name: type
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
          type: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: CPU P90 analysis
        tool_configurations: {}
        tool_label: Thread Polaris Metrics P90
        tool_name: 线程北极星P90数据
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
          type:
            type: mixed
            value: cpu
        type: tool
      height: 53
      id: '1743149606391'
      parentId: '1741497176064'
      position:
        x: 1174.8261261305506
        y: 378.0882500223738
      positionAbsolute:
        x: 6437.282403410635
        y: 1294.0882500223738
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          label:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          llm_description: Type (cpu,net,file,epoll,runq)
          max: null
          min: null
          name: type
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
          type: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: Net P90 analysis
        tool_configurations: {}
        tool_label: Thread Polaris Metrics P90
        tool_name: 线程北极星P90数据
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
          type:
            type: mixed
            value: net
        type: tool
      height: 53
      id: '1743150910103'
      parentId: '1741497176064'
      position:
        x: 1483.3553424127522
        y: 574.6824876720586
      positionAbsolute:
        x: 6745.811619692837
        y: 1490.6824876720586
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          label:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          llm_description: Type (cpu,net,file,epoll,runq)
          max: null
          min: null
          name: type
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
          type: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: FILE P90 analysis
        tool_configurations: {}
        tool_label: Thread Polaris Metrics P90
        tool_name: 线程北极星P90数据
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
          type:
            type: mixed
            value: file
        type: tool
      height: 53
      id: '1743152043813'
      parentId: '1741497176064'
      position:
        x: 1156.6165679157248
        y: 475.1754672301147
      positionAbsolute:
        x: 6419.072845195809
        y: 1391.1754672301147
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          label:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          llm_description: Type (cpu,net,file,epoll,runq)
          max: null
          min: null
          name: type
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
          type: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: EPOLL P90 analysis
        tool_configurations: {}
        tool_label: Thread Polaris Metrics P90
        tool_name: 线程北极星P90数据
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
          type:
            type: mixed
            value: epoll
        type: tool
      height: 53
      id: '1743152103020'
      parentId: '1741497176064'
      position:
        x: 1463.2885127206846
        y: 673.674875984598
      positionAbsolute:
        x: 6725.744790000769
        y: 1589.674875984598
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        desc: ''
        isInIteration: true
        is_team_authorization: true
        iteration_id: '1741497176064'
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          label:
            en_US: Pod name
            ja_JP: Pod name
            pt_BR: Pod name
            zh_Hans: Pod名称
          llm_description: Pod name
          max: null
          min: null
          name: pod
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          label:
            en_US: Type (cpu,net,file,epoll,runq)
            ja_JP: Type (cpu,net,file,epoll,runq)
            pt_BR: Type (cpu,net,file,epoll,runq)
            zh_Hans: 线程执行类型(cpu,net,file,epoll,runq)
          llm_description: Type (cpu,net,file,epoll,runq)
          max: null
          min: null
          name: type
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query start time(Microsecond)
            ja_JP: Data query start time(Microsecond)
            pt_BR: Data query start time
            zh_Hans: 开始时间 (微秒)
          label:
            en_US: startTime
            ja_JP: startTime
            pt_BR: startTime
            zh_Hans: startTime
          llm_description: Data query start time(Microsecond)
          max: null
          min: null
          name: startTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Data query end time(Microsecond)
            ja_JP: Data query end time(Microsecond)
            pt_BR: Data query end time(Microsecond)
            zh_Hans: 结束时间 (微秒)
          label:
            en_US: endTime
            ja_JP: endTime
            pt_BR: endTime
            zh_Hans: endTime
          llm_description: Data query end time(Microsecond)
          max: null
          min: null
          name: endTime
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: number
        params:
          endTime: ''
          pod: ''
          startTime: ''
          type: ''
        provider_id: apo_select
        provider_name: apo_select
        provider_type: builtin
        selected: false
        title: RUNQ P90 analysis
        tool_configurations: {}
        tool_label: Thread Polaris Metrics P90
        tool_name: 线程北极星P90数据
        tool_parameters:
          endTime:
            type: variable
            value:
            - '1741227526517'
            - endTime
          pod:
            type: mixed
            value: '{{#1741497181784.pod#}}'
          startTime:
            type: variable
            value:
            - '1741227526517'
            - startTime
          type:
            type: mixed
            value: runq
        type: tool
      height: 53
      id: '1743152169252'
      parentId: '1741497176064'
      position:
        x: 1141.3922062676138
        y: 805.1816882600981
      positionAbsolute:
        x: 6403.848483547698
        y: 1721.181688260098
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "def main(data_json: str, avg_json: str) -> dict:\n    data = json.loads(data_json)\n\
          \    timeseries = data.get('data', {}).get('timeseries', [])\n    \n   \
          \ if len(timeseries) == 0:\n        return {\n            \"result\": \"\
          []\"\n        }\n    unit = data.get('unit', '')\n    parsed_avg = json.loads(avg_json)\n\
          \    \n    try:\n        avgs = json.loads(parsed_avg.get(\"data\", \"{}\"\
          ))\n    except json.JSONDecodeError:\n        avgs = {}\n\n    filtered\
          \ = []\n    for metric in timeseries:\n        tid = metric['labels']['tid']\n\
          \        avg = avgs.get(tid, {}).get('avg', 0)\n        if avg == 0 :\n\
          \            continue\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/avg > 1.2:\n                count += 1\n\n        if count\
          \ / len(chart) >= 0.2:\n            res = {\n                \"chart\":\
          \ chart,\n                \"abnormalCount\": count,\n                \"\
          tid\": tid,\n                \"avg\": avg,\n                \"unit\": unit\n\
          \            }\n            filtered.append(res)\n\n    return {\n     \
          \   \"result\": json.dumps(filtered)\n    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Get abnormal data
        type: code
        variables:
        - value_selector:
          - '17430595109950'
          - text
          variable: data_json
        - value_selector:
          - '1743149089034'
          - text
          variable: avg_json
      height: 53
      id: '1744185676164'
      position:
        x: 3666
        y: 720
      positionAbsolute:
        x: 3666
        y: 720
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(data_json: str, avg_json: str) -> dict:\n    data = json.loads(data_json)\n\
          \    timeseries = data.get('data', {}).get('timeseries', [])\n    \n   \
          \ if len(timeseries) == 0:\n        return {\n            \"result\": \"\
          []\"\n        }\n    unit = data.get('unit', '')\n    parsed_avg = json.loads(avg_json)\n\
          \    \n    try:\n        avgs = json.loads(parsed_avg.get(\"data\", \"{}\"\
          ))\n    except json.JSONDecodeError:\n        avgs = {}\n\n    filtered\
          \ = []\n    for metric in timeseries:\n        tid = metric['labels']['tid']\n\
          \        avg = avgs.get(tid, {}).get('avg', 0)\n        if avg == 0 :\n\
          \            continue\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/avg > 1.2:\n                count += 1\n\n        if count\
          \ / len(chart) >= 0.2:\n            res = {\n                \"chart\":\
          \ chart,\n                \"abnormalCount\": count,\n                \"\
          tid\": tid,\n                \"avg\": avg,\n                \"unit\": unit\n\
          \            }\n            filtered.append(res)\n\n    return {\n     \
          \   \"result\": json.dumps(filtered)\n    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Get abnormal data
        type: code
        variables:
        - value_selector:
          - '17430597987060'
          - text
          variable: data_json
        - value_selector:
          - '17431493591600'
          - text
          variable: avg_json
      height: 53
      id: '17441926182400'
      position:
        x: 3666
        y: 812
      positionAbsolute:
        x: 3666
        y: 812
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(data_json: str, avg_json: str) -> dict:\n    data = json.loads(data_json)\n\
          \    timeseries = data.get('data', {}).get('timeseries', [])\n    \n   \
          \ if len(timeseries) == 0:\n        return {\n            \"result\": \"\
          []\"\n        }\n    unit = data.get('unit', '')\n    parsed_avg = json.loads(avg_json)\n\
          \    \n    try:\n        avgs = json.loads(parsed_avg.get(\"data\", \"{}\"\
          ))\n    except json.JSONDecodeError:\n        avgs = {}\n\n    filtered\
          \ = []\n    for metric in timeseries:\n        tid = metric['labels']['tid']\n\
          \        avg = avgs.get(tid, {}).get('avg', 0)\n        if avg == 0 :\n\
          \            continue\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/avg > 1.2:\n                count += 1\n\n        if count\
          \ / len(chart) >= 0.2:\n            res = {\n                \"chart\":\
          \ chart,\n                \"abnormalCount\": count,\n                \"\
          tid\": tid,\n                \"avg\": avg,\n                \"unit\": unit\n\
          \            }\n            filtered.append(res)\n\n    return {\n     \
          \   \"result\": json.dumps(filtered)\n    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Get abnormal data
        type: code
        variables:
        - value_selector:
          - '17430598907140'
          - text
          variable: data_json
        - value_selector:
          - '17431493623970'
          - text
          variable: avg_json
      height: 53
      id: '17441926217060'
      position:
        x: 3666
        y: 904
      positionAbsolute:
        x: 3666
        y: 904
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(data_json: str, avg_json: str) -> dict:\n    data = json.loads(data_json)\n\
          \    timeseries = data.get('data', {}).get('timeseries', [])\n    \n   \
          \ if len(timeseries) == 0:\n        return {\n            \"result\": \"\
          []\"\n        }\n    unit = data.get('unit', '')\n    parsed_avg = json.loads(avg_json)\n\
          \    \n    try:\n        avgs = json.loads(parsed_avg.get(\"data\", \"{}\"\
          ))\n    except json.JSONDecodeError:\n        avgs = {}\n\n    filtered\
          \ = []\n    for metric in timeseries:\n        tid = metric['labels']['tid']\n\
          \        avg = avgs.get(tid, {}).get('avg', 0)\n        if avg == 0 :\n\
          \            continue\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/avg > 1.2:\n                count += 1\n\n        if count\
          \ / len(chart) >= 0.2:\n            res = {\n                \"chart\":\
          \ chart,\n                \"abnormalCount\": count,\n                \"\
          tid\": tid,\n                \"avg\": avg,\n                \"unit\": unit\n\
          \            }\n            filtered.append(res)\n\n    return {\n     \
          \   \"result\": json.dumps(filtered)\n    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Get abnormal data
        type: code
        variables:
        - value_selector:
          - '17430610599980'
          - text
          variable: data_json
        - value_selector:
          - '17431493655610'
          - text
          variable: avg_json
      height: 53
      id: '17441926243210'
      position:
        x: 3666
        y: 1088
      positionAbsolute:
        x: 3666
        y: 1088
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(data_json: str, avg_json: str) -> dict:\n    data = json.loads(data_json)\n\
          \    timeseries = data.get('data', {}).get('timeseries', [])\n    \n   \
          \ if len(timeseries) == 0:\n        return {\n            \"result\": \"\
          []\"\n        }\n    unit = data.get('unit', '')\n    parsed_avg = json.loads(avg_json)\n\
          \    \n    try:\n        avgs = json.loads(parsed_avg.get(\"data\", \"{}\"\
          ))\n    except json.JSONDecodeError:\n        avgs = {}\n\n    filtered\
          \ = []\n    for metric in timeseries:\n        tid = metric['labels']['tid']\n\
          \        avg = avgs.get(tid, {}).get('avg', 0)\n        if avg == 0 :\n\
          \            continue\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/avg > 1.2:\n                count += 1\n\n        if count\
          \ / len(chart) >= 0.2:\n            res = {\n                \"chart\":\
          \ chart,\n                \"abnormalCount\": count,\n                \"\
          tid\": tid,\n                \"avg\": avg,\n                \"unit\": unit\n\
          \            }\n            filtered.append(res)\n\n    return {\n     \
          \   \"result\": json.dumps(filtered)\n    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Get abnormal data
        type: code
        variables:
        - value_selector:
          - '17430610719970'
          - text
          variable: data_json
        - value_selector:
          - '17431493682530'
          - text
          variable: avg_json
      height: 53
      id: '17441926286390'
      position:
        x: 3666
        y: 996
      positionAbsolute:
        x: 3666
        y: 996
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(data_json: str, avg_json: str) -> dict:\n    data = json.loads(data_json)\n\
          \    timeseries = data.get('data', {}).get('timeseries', [])\n    \n   \
          \ if len(timeseries) == 0:\n        return {\n            \"result\": \"\
          []\"\n        }\n    unit = data.get('unit', '')\n    parsed_avg = json.loads(avg_json)\n\
          \    \n    try:\n        avgs = json.loads(parsed_avg.get(\"data\", \"{}\"\
          ))\n    except json.JSONDecodeError:\n        avgs = {}\n\n    filtered\
          \ = []\n    for metric in timeseries:\n        tid = metric['labels']['tid']\n\
          \        avg = avgs.get(tid, {}).get('avg', 0)\n        if avg == 0 :\n\
          \            continue\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/avg > 1.2:\n                count += 1\n\n        if count\
          \ / len(chart) >= 0.2:\n            res = {\n                \"chart\":\
          \ chart,\n                \"abnormalCount\": count,\n                \"\
          tid\": tid,\n                \"avg\": avg,\n                \"unit\": unit\n\
          \            }\n            filtered.append(res)\n\n    return {\n     \
          \   \"result\": json.dumps(filtered)\n    }"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. Get abnormal data
        type: code
        variables:
        - value_selector:
          - '1742980720651'
          - text
          variable: data_json
        - value_selector:
          - '1743149606391'
          - text
          variable: avg_json
      height: 53
      id: '1744206107700'
      parentId: '1741497176064'
      position:
        x: 1488.8192785924111
        y: 373.13327676062727
      positionAbsolute:
        x: 6751.275555872496
        y: 1289.1332767606273
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "def main(data_json: str, avg_json: str) -> dict:\n    data = json.loads(data_json)\n\
          \    timeseries = data.get('data', {}).get('timeseries', [])\n    \n   \
          \ if len(timeseries) == 0:\n        return {\n            \"result\": \"\
          []\"\n        }\n    unit = data.get('unit', '')\n    parsed_avg = json.loads(avg_json)\n\
          \    \n    try:\n        avgs = json.loads(parsed_avg.get(\"data\", \"{}\"\
          ))\n    except json.JSONDecodeError:\n        avgs = {}\n\n    filtered\
          \ = []\n    for metric in timeseries:\n        tid = metric['labels']['tid']\n\
          \        avg = avgs.get(tid, {}).get('avg', 0)\n        if avg == 0 :\n\
          \            continue\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/avg > 1.2:\n                count += 1\n\n        if count\
          \ / len(chart) >= 0.2:\n            res = {\n                \"chart\":\
          \ chart,\n                \"abnormalCount\": count,\n                \"\
          tid\": tid,\n                \"avg\": avg,\n                \"unit\": unit\n\
          \            }\n            filtered.append(res)\n\n    return {\n     \
          \   \"result\": json.dumps(filtered)\n    }"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. Get abnormal data
        type: code
        variables:
        - value_selector:
          - '1742980748320'
          - text
          variable: data_json
        - value_selector:
          - '1743152043813'
          - text
          variable: avg_json
      height: 53
      id: '1744206199211'
      parentId: '1741497176064'
      position:
        x: 1487.2988857309501
        y: 474.870200391917
      positionAbsolute:
        x: 6749.755163011035
        y: 1390.870200391917
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "def main(data_json: str, avg_json: str) -> dict:\n    data = json.loads(data_json)\n\
          \    timeseries = data.get('data', {}).get('timeseries', [])\n    \n   \
          \ if len(timeseries) == 0:\n        return {\n            \"result\": \"\
          []\"\n        }\n    unit = data.get('unit', '')\n    parsed_avg = json.loads(avg_json)\n\
          \    \n    try:\n        avgs = json.loads(parsed_avg.get(\"data\", \"{}\"\
          ))\n    except json.JSONDecodeError:\n        avgs = {}\n\n    filtered\
          \ = []\n    for metric in timeseries:\n        tid = metric['labels']['tid']\n\
          \        avg = avgs.get(tid, {}).get('avg', 0)\n        if avg == 0 :\n\
          \            continue\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/avg > 1.2:\n                count += 1\n\n        if count\
          \ / len(chart) >= 0.2:\n            res = {\n                \"chart\":\
          \ chart,\n                \"abnormalCount\": count,\n                \"\
          tid\": tid,\n                \"avg\": avg,\n                \"unit\": unit\n\
          \            }\n            filtered.append(res)\n\n    return {\n     \
          \   \"result\": json.dumps(filtered)\n    }"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. Get abnormal data
        type: code
        variables:
        - value_selector:
          - '1742980780865'
          - text
          variable: data_json
        - value_selector:
          - '1743150910103'
          - text
          variable: avg_json
      height: 53
      id: '1744206249528'
      parentId: '1741497176064'
      position:
        x: 1789.9724165332118
        y: 575.9896449249493
      positionAbsolute:
        x: 7052.428693813296
        y: 1491.9896449249493
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "def main(data_json: str, avg_json: str) -> dict:\n    data = json.loads(data_json)\n\
          \    timeseries = data.get('data', {}).get('timeseries', [])\n    \n   \
          \ if len(timeseries) == 0:\n        return {\n            \"result\": \"\
          []\"\n        }\n    unit = data.get('unit', '')\n    parsed_avg = json.loads(avg_json)\n\
          \    \n    try:\n        avgs = json.loads(parsed_avg.get(\"data\", \"{}\"\
          ))\n    except json.JSONDecodeError:\n        avgs = {}\n\n    filtered\
          \ = []\n    for metric in timeseries:\n        tid = metric['labels']['tid']\n\
          \        avg = avgs.get(tid, {}).get('avg', 0)\n        if avg == 0 :\n\
          \            continue\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/avg > 1.2:\n                count += 1\n\n        if count\
          \ / len(chart) >= 0.2:\n            res = {\n                \"chart\":\
          \ chart,\n                \"abnormalCount\": count,\n                \"\
          tid\": tid,\n                \"avg\": avg,\n                \"unit\": unit\n\
          \            }\n            filtered.append(res)\n\n    return {\n     \
          \   \"result\": json.dumps(filtered)\n    }"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. Get abnormal data
        type: code
        variables:
        - value_selector:
          - '1742980837261'
          - text
          variable: data_json
        - value_selector:
          - '1743152103020'
          - text
          variable: avg_json
      height: 53
      id: '1744206286177'
      parentId: '1741497176064'
      position:
        x: 1789.4007677668633
        y: 673.2187341513443
      positionAbsolute:
        x: 7051.857045046948
        y: 1589.2187341513443
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "def main(data_json: str, avg_json: str) -> dict:\n    data = json.loads(data_json)\n\
          \    timeseries = data.get('data', {}).get('timeseries', [])\n    \n   \
          \ if len(timeseries) == 0:\n        return {\n            \"result\": \"\
          []\"\n        }\n    unit = data.get('unit', '')\n    parsed_avg = json.loads(avg_json)\n\
          \    \n    try:\n        avgs = json.loads(parsed_avg.get(\"data\", \"{}\"\
          ))\n    except json.JSONDecodeError:\n        avgs = {}\n\n    filtered\
          \ = []\n    for metric in timeseries:\n        tid = metric['labels']['tid']\n\
          \        avg = avgs.get(tid, {}).get('avg', 0)\n        if avg == 0 :\n\
          \            continue\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/avg > 1.2:\n                count += 1\n\n        if count\
          \ / len(chart) >= 0.2:\n            res = {\n                \"chart\":\
          \ chart,\n                \"abnormalCount\": count,\n                \"\
          tid\": tid,\n                \"avg\": avg,\n                \"unit\": unit\n\
          \            }\n            filtered.append(res)\n\n    return {\n     \
          \   \"result\": json.dumps(filtered)\n    }"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. Get abnormal data
        type: code
        variables:
        - value_selector:
          - '1742980885557'
          - text
          variable: data_json
        - value_selector:
          - '1743152169252'
          - text
          variable: avg_json
      height: 53
      id: '1744206314118'
      parentId: '1741497176064'
      position:
        x: 1465.3401312758333
        y: 804.853363697991
      positionAbsolute:
        x: 6727.796408555918
        y: 1720.853363697991
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "def main(data_json: str) -> dict:\n    timeseries = json.loads(data_json).get('data',\
          \ {}).get('timeseries', [])\n        \n    normal = 0.05\n    filtered =\
          \ []\n    for metric in timeseries:\n        pod = metric.get('labels',\
          \ {}).get('dst_pod', '')\n        if len(pod) == 0:\n            pod = metric.get('labels',\
          \ {}).get('pid', '')\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/normal > 1.2:\n                count += 1\n\n        if\
          \ count / len(chart) >= 0.2:\n            res = {\n                \"chart\"\
          : chart,\n                \"abnormalCount\": count,\n                \"\
          dst_pod\": pod,\n                \"normal\": normal\n            }\n   \
          \         filtered.append(res)\n\n    return {\n        \"result\": json.dumps(filtered)\n\
          \    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Get abnormal rtt
        type: code
        variables:
        - value_selector:
          - '17430610640640'
          - text
          variable: data_json
      height: 53
      id: '1744255998058'
      position:
        x: 3060
        y: 1088
      positionAbsolute:
        x: 3060
        y: 1088
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(data_json: str) -> dict:\n    timeseries = json.loads(data_json).get('data',\
          \ {}).get('timeseries', [])\n        \n    normal = 0.05\n    filtered =\
          \ []\n    for metric in timeseries:\n        pod = metric.get('labels',\
          \ {}).get('dst_pod', '')\n        if len(pod) == 0:\n            pod = metric.get('labels',\
          \ {}).get('pid', '')\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/normal > 1.2:\n                count += 1\n\n        if\
          \ count / len(chart) >= 0.2:\n            res = {\n                \"chart\"\
          : chart,\n                \"abnormalCount\": count,\n                \"\
          dst_pod\": pod,\n                \"normal\": normal\n            }\n   \
          \         filtered.append(res)\n\n    return {\n        \"result\": json.dumps(filtered)\n\
          \    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Get abnormal rtt
        type: code
        variables:
        - value_selector:
          - '17430598942980'
          - text
          variable: data_json
      height: 53
      id: '17442560822670'
      position:
        x: 3060
        y: 904
      positionAbsolute:
        x: 3060
        y: 904
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\n\ndef main(data_json: str, proof_json: str, type='epoll')\
          \ -> dict:\n    data = json.loads(data_json)\n    proof_data = json.loads(proof_json)\n\
          \    \n    analysis = analyze_abnormal_data(data, proof_data, type)\n  \
          \  summary = get_summary(analysis=analysis, type=type)\n\n    analysis['summary']\
          \ = summary\n    return {\n        \"result\": json.dumps(analysis)\n  \
          \  }\n\ndef analyze_abnormal_data(abnormal_data, proof_data, type: str)\
          \ -> dict:\n    \n    if type == 'net' or type == 'epoll':\n        return\
          \ net_analyze(abnormal_data=abnormal_data, proof_data=proof_data)\n    elif\
          \ type == 'runq':\n        return runq_analyze(abnormal_data=abnormal_data)\n\
          \    else:\n        return consistent_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n\n\ndef consistent_analyze(abnormal_data: list,\
          \ proof_data: dict) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    timeseries = proof_data.get('data', {}).get('timeseries', [])\n  \
          \  proof_chart = {}\n    if len(timeseries) > 0:\n        proof_chart =\
          \ timeseries[0].get('chart', {}).get('chartData', {})\n    related_threads\
          \ = find_similar_charts(abnormal_data=abnormal_data, proof_chart=proof_chart,\
          \ id_key='tid')    \n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related_threads\n    }\n\ndef find_similar_charts(abnormal_data,\
          \ proof_chart, id_key: str, threshold=0.8):\n    if not abnormal_data or\
          \ not proof_chart:\n        return []\n\n    def cosine_sim(a, b):\n   \
          \     dot_product = sum(x * y for x, y in zip(a, b))\n        norm_a = sum(x**2\
          \ for x in a) ** 0.5\n        norm_b = sum(y**2 for y in b) ** 0.5\n   \
          \     if norm_a == 0 or norm_b == 0:\n            return 0.0\n        return\
          \ dot_product / (norm_a * norm_b)\n\n    similar = []\n    for data in abnormal_data:\n\
          \        chart = data['chart']\n        tid = data[id_key]\n        \n \
          \       common_ts = set(chart.keys()) & set(proof_chart.keys())\n      \
          \  if not common_ts:\n            continue\n            \n        sorted_ts\
          \ = sorted(common_ts)\n        a = [chart[ts] for ts in sorted_ts]\n   \
          \     b = [proof_chart[ts] for ts in sorted_ts]\n        \n        similarity\
          \ = cosine_sim(a, b)\n        if similarity >= threshold:\n            similar.append((tid,\
          \ similarity))\n    \n    similar.sort(key=lambda x: x[1], reverse=True)\n\
          \    return [item[0] for item in similar]\n\ndef net_analyze(abnormal_data:\
          \ list, proof_data: list) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    related = []\n    for data in proof_data:\n        dst_pod = data.get('dst_pod',\
          \ '')\n        if dst_pod == '':\n            continue\n\n        related.append(dst_pod)\n\
          \    \n    return {\n        'abnormalAnalysis': analysis,\n        'related':\
          \ related\n    }\n\ndef runq_analyze(abnormal_data: list) -> dict:\n   \
          \ analysis = get_analysis_data(abnormal_data=abnormal_data)\n\n    return\
          \ {\n        'abnormalAnalysis': analysis,\n    }\n\ndef get_analysis_data(abnormal_data):\n\
          \    \"\"\"Get abnormal count, chart, spikes, avg\"\"\"\n    analysis =\
          \ []\n\n    for data in abnormal_data:\n        chart = data['chart']\n\
          \        abnormal_count = data['abnormalCount']\n        unit = data['unit']\n\
          \        \n        values = sorted(chart.values(), reverse=True)\n     \
          \   spikes = values[:abnormal_count]\n        analysis.append({\n      \
          \      'tid': data['tid'],\n            'abnormalCount': abnormal_count,\n\
          \            'spikes': spikes,\n            'avg': data['avg'],\n      \
          \      'unit': unit\n        })\n\n    return analysis\n\ndef get_summary(analysis:\
          \ dict, type: str) -> str:\n    \"\"\"\n    生成异常线程报告\n    :param abnormal_count:\
          \ 异常线程数量 (int)\n    :param related_items: 相关项列表 (list)\n    :param item_type:\
          \ 相关项类型名称 (str, default: \"threads\")\n    :return: 格式化报告字符串\n    \"\"\"\
          \n    \n    item_type = ''\n    item_str = ''\n    if type == 'net' or type\
          \ == 'epoll':\n        pods = analysis.get(\"related\", [])\n        if\
          \ len(pods) > 0 :\n            pods_str = \", \".join(pods)\n          \
          \  item_str += f\"{pods_str}. The RTT raised about 20% than 0.05s over 20%\
          \ time samples. \"\n        else:\n            item_str = 'The RTT is normal.'\n\
          \    else:\n        item_type = 'threads'\n\n        threads = analysis.get(\"\
          related\", [])\n        threads_str = \", \".join(threads)\n        if len(threads_str)\
          \ > 0:\n            item_str += threads_str + \". \"\n\n    related_str\
          \ = ''\n    if len(item_str) > 0:\n        if type == 'net' or type == 'epoll':\n\
          \            related_str = item_str\n        else:\n            related_str\
          \ = f\"The most related {item_type} are {item_str} \"\n    \n    return\
          \ f\"There are {len(analysis['abnormalAnalysis'])} abnormal threads. \"\
          \ + related_str\n    "
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: EPOLL analyze
        type: code
        variables:
        - value_selector:
          - '17441926243210'
          - result
          variable: data_json
        - value_selector:
          - '1744255998058'
          - result
          variable: proof_json
      height: 53
      id: '1744287265980'
      position:
        x: 3969
        y: 1088
      positionAbsolute:
        x: 3969
        y: 1088
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\ndef format_number(num):\n    return \"{:,}\".format(num)\n\
          \ndef json_to_markdown(data, analysis_type):\n    markdown = [\n       \
          \ f\"# {analysis_type} Consumption Analysis Report\\n\",\n        \"## Executive\
          \ Summary\",\n        f\"The summary of {analysis_type} thread consumption\
          \ analysis.\\n\"\n    ]\n    \n    if 'abnormalAnalysis' in data and data['abnormalAnalysis']:\n\
          \        markdown.append(\"## Abnormal Thread Details\")\n        for analysis\
          \ in data['abnormalAnalysis']:\n            unit = analysis['unit']\n  \
          \          markdown.extend([\n                f\"### Thread {analysis['tid']}\"\
          ,\n                f\"- ​**​Abnormal data count​**​: {analysis['abnormalCount']}\"\
          ,\n                f\"- ​**​Spike values​**​: ({unit})\",\n            \
          \    *[f\"  - {format_number(spike)}{unit}\" for spike in sorted(analysis['spikes'],\
          \ reverse=True)],\n                f\"- ​**​Average consumption​**​: {format_number(round(analysis['avg'],\
          \ 2))}{unit}\",\n            ])\n            \n            markdown.append(\"\
          \\n---\\n\") \n    \n    if 'summary' in data:\n        markdown.extend([\n\
          \            \"## Final Conclusion\",\n            f\"{data['summary']}\"\
          ,\n        ])\n    \n    return \"\\n\".join(markdown)\n\ndef main(data_json:\
          \ str) -> dict:\n    data = json.loads(data_json)\n    markdown = json_to_markdown(data,\
          \ 'epoll')\n    return {\"result\": markdown}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: to template epoll
        type: code
        variables:
        - value_selector:
          - '1744287265980'
          - result
          variable: data_json
      height: 53
      id: '1744290470304'
      position:
        x: 4272
        y: 1088
      positionAbsolute:
        x: 4272
        y: 1088
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\n\ndef main(data_json: str, proof_json: str, type='runq')\
          \ -> dict:\n    data = json.loads(data_json)\n    proof_data = json.loads(proof_json)\n\
          \    \n    analysis = analyze_abnormal_data(data, proof_data, type)\n  \
          \  summary = get_summary(analysis=analysis, type=type)\n\n    analysis['summary']\
          \ = summary\n    return {\n        \"result\": json.dumps(analysis)\n  \
          \  }\n\ndef analyze_abnormal_data(abnormal_data, proof_data, type: str)\
          \ -> dict:\n    if len(abnormal_data) == 0:\n        return {}\n    \n \
          \   if type == 'net' or type == 'epoll':\n        return net_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n    elif type == 'runq':\n        return runq_analyze(abnormal_data=abnormal_data)\n\
          \    else:\n        return consistent_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n\n\ndef consistent_analyze(abnormal_data: list,\
          \ proof_data: dict) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    timeseries = proof_data.get('data', {}).get('timeseries', [])\n  \
          \  proof_chart = {}\n    if len(timeseries) > 0:\n        proof_chart =\
          \ timeseries[0].get('chart', {}).get('chartData', {})\n    related_threads\
          \ = find_similar_charts(abnormal_data=abnormal_data, proof_chart=proof_chart,\
          \ id_key='tid')    \n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related_threads\n    }\n\ndef find_similar_charts(abnormal_data,\
          \ proof_chart, id_key: str, threshold=0.8):\n    if not abnormal_data or\
          \ not proof_chart:\n        return []\n\n    def cosine_sim(a, b):\n   \
          \     dot_product = sum(x * y for x, y in zip(a, b))\n        norm_a = sum(x**2\
          \ for x in a) ** 0.5\n        norm_b = sum(y**2 for y in b) ** 0.5\n   \
          \     if norm_a == 0 or norm_b == 0:\n            return 0.0\n        return\
          \ dot_product / (norm_a * norm_b)\n\n    similar = []\n    for data in abnormal_data:\n\
          \        chart = data['chart']\n        tid = data[id_key]\n        \n \
          \       common_ts = set(chart.keys()) & set(proof_chart.keys())\n      \
          \  if not common_ts:\n            continue\n            \n        sorted_ts\
          \ = sorted(common_ts)\n        a = [chart[ts] for ts in sorted_ts]\n   \
          \     b = [proof_chart[ts] for ts in sorted_ts]\n        \n        similarity\
          \ = cosine_sim(a, b)\n        if similarity >= threshold:\n            similar.append((tid,\
          \ similarity))\n    \n    similar.sort(key=lambda x: x[1], reverse=True)\n\
          \    return [item[0] for item in similar]\n\ndef net_analyze(abnormal_data:\
          \ list, proof_data: list) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    related = []\n    for data in abnormal_data:\n        chart = data.get('chart',\
          \ {})\n\n        tid = data.get('tid', '')\n        if tid == '':\n    \
          \        continue\n\n        # find which downstream pod is related to this\
          \ thread\n        res = find_similar_charts(proof_data, chart, id_key='dst_pod')\n\
          \n        related.append({\n            'tid': tid,\n            'relatedItems':\
          \ res,\n        })\n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related\n    }\n\ndef runq_analyze(abnormal_data: list)\
          \ -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    return {\n        'abnormalAnalysis': analysis,\n    }\n\ndef get_analysis_data(abnormal_data):\n\
          \    \"\"\"Get abnormal count, chart, spikes, avg\"\"\"\n    analysis =\
          \ []\n\n    for data in abnormal_data:\n        chart = data['chart']\n\
          \        abnormal_count = data['abnormalCount']\n        unit = data['unit']\n\
          \        \n        values = sorted(chart.values(), reverse=True)\n     \
          \   spikes = values[:abnormal_count]\n        analysis.append({\n      \
          \      'tid': data['tid'],\n            'abnormalCount': abnormal_count,\n\
          \            'spikes': spikes,\n            'avg': data['avg'],\n      \
          \      'unit': unit\n        })\n\n    return analysis\n\ndef get_summary(analysis:\
          \ dict, type: str) -> str:\n    \"\"\"\n    生成异常线程报告\n    :param abnormal_count:\
          \ 异常线程数量 (int)\n    :param related_items: 相关项列表 (list)\n    :param item_type:\
          \ 相关项类型名称 (str, default: \"threads\")\n    :return: 格式化报告字符串\n    \"\"\"\
          \n    if analysis == {}:\n        good_str = f\"Thread consumption on {type}\
          \ is normal.\"\n        return 'No abnormal data was observed. ' + good_str\n\
          \    \n    item_type = ''\n    item_str = ''\n    if type == 'net' or type\
          \ == 'epoll':\n        item_type = 'downstream pods'\n        for item in\
          \ analysis.get(\"related\", []):\n            tid = item.get(\"tid\", \"\
          \")\n            if tid == '':\n                continue\n\n           \
          \ pods = item.get(\"relatedItems\", [])\n            pods = item.get(\"\
          relatedItems\", [])\n            if len(pods) == 0 :\n                continue\n\
          \    \n            pods_str = \", \".join(pods)\n            item_str +=\
          \ f\"thread {tid}: affected by {pods_str}. The RTT between them raised about\
          \ 20% over 20% time samples.\"\n            \n            \n    else:\n\
          \        item_type = 'threads'\n\n        threads = analysis.get(\"related\"\
          , [])\n        threads_str = \", \".join(threads)\n        if len(threads_str)\
          \ > 0:\n            item_str += threads_str + \". \"\n    related_str =\
          \ ''\n    if len(item_str) > 0:\n        related_str = f\"The most related\
          \ {item_type} are {item_str}. \"\n    return f\"There are {len(analysis['abnormalAnalysis'])}\
          \ abnormal threads. \" + related_str\n    "
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: RUNQ analyze
        type: code
        variables:
        - value_selector:
          - '17441926286390'
          - result
          variable: data_json
        - value_selector:
          - '17430610756270'
          - text
          variable: proof_json
      height: 53
      id: '17443356883380'
      position:
        x: 3969
        y: 996
      positionAbsolute:
        x: 3969
        y: 996
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\n\ndef main(data_json: str, proof_json: str, type='net')\
          \ -> dict:\n    data = json.loads(data_json)\n    proof_data = json.loads(proof_json)\n\
          \    \n    analysis = analyze_abnormal_data(data, proof_data, type)\n  \
          \  summary = get_summary(analysis=analysis, type=type)\n\n    analysis['summary']\
          \ = summary\n    return {\n        \"result\": json.dumps(analysis)\n  \
          \  }\n\ndef analyze_abnormal_data(abnormal_data, proof_data, type: str)\
          \ -> dict:\n    \n    if type == 'net' or type == 'epoll':\n        return\
          \ net_analyze(abnormal_data=abnormal_data, proof_data=proof_data)\n    elif\
          \ type == 'runq':\n        return runq_analyze(abnormal_data=abnormal_data)\n\
          \    else:\n        return consistent_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n\n\ndef consistent_analyze(abnormal_data: list,\
          \ proof_data: dict) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    timeseries = proof_data.get('data', {}).get('timeseries', [])\n  \
          \  proof_chart = {}\n    if len(timeseries) > 0:\n        proof_chart =\
          \ timeseries[0].get('chart', {}).get('chartData', {})\n    related_threads\
          \ = find_similar_charts(abnormal_data=abnormal_data, proof_chart=proof_chart,\
          \ id_key='tid')    \n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related_threads\n    }\n\ndef find_similar_charts(abnormal_data,\
          \ proof_chart, id_key: str, threshold=0.8):\n    if not abnormal_data or\
          \ not proof_chart:\n        return []\n\n    def cosine_sim(a, b):\n   \
          \     dot_product = sum(x * y for x, y in zip(a, b))\n        norm_a = sum(x**2\
          \ for x in a) ** 0.5\n        norm_b = sum(y**2 for y in b) ** 0.5\n   \
          \     if norm_a == 0 or norm_b == 0:\n            return 0.0\n        return\
          \ dot_product / (norm_a * norm_b)\n\n    similar = []\n    for data in abnormal_data:\n\
          \        chart = data['chart']\n        tid = data[id_key]\n        \n \
          \       common_ts = set(chart.keys()) & set(proof_chart.keys())\n      \
          \  if not common_ts:\n            continue\n            \n        sorted_ts\
          \ = sorted(common_ts)\n        a = [chart[ts] for ts in sorted_ts]\n   \
          \     b = [proof_chart[ts] for ts in sorted_ts]\n        \n        similarity\
          \ = cosine_sim(a, b)\n        if similarity >= threshold:\n            similar.append((tid,\
          \ similarity))\n    \n    similar.sort(key=lambda x: x[1], reverse=True)\n\
          \    return [item[0] for item in similar]\n\ndef net_analyze(abnormal_data:\
          \ list, proof_data: list) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    related = []\n    for data in proof_data:\n        dst_pod = data.get('dst_pod',\
          \ '')\n        if dst_pod == '':\n            continue\n\n        related.append(dst_pod)\n\
          \    \n    return {\n        'abnormalAnalysis': analysis,\n        'related':\
          \ related\n    }\n\ndef runq_analyze(abnormal_data: list) -> dict:\n   \
          \ analysis = get_analysis_data(abnormal_data=abnormal_data)\n\n    return\
          \ {\n        'abnormalAnalysis': analysis,\n    }\n\ndef get_analysis_data(abnormal_data):\n\
          \    \"\"\"Get abnormal count, chart, spikes, avg\"\"\"\n    analysis =\
          \ []\n\n    for data in abnormal_data:\n        chart = data['chart']\n\
          \        abnormal_count = data['abnormalCount']\n        unit = data['unit']\n\
          \        \n        values = sorted(chart.values(), reverse=True)\n     \
          \   spikes = values[:abnormal_count]\n        analysis.append({\n      \
          \      'tid': data['tid'],\n            'abnormalCount': abnormal_count,\n\
          \            'spikes': spikes,\n            'avg': data['avg'],\n      \
          \      'unit': unit\n        })\n\n    return analysis\n\ndef get_summary(analysis:\
          \ dict, type: str) -> str:\n    \"\"\"\n    生成异常线程报告\n    :param abnormal_count:\
          \ 异常线程数量 (int)\n    :param related_items: 相关项列表 (list)\n    :param item_type:\
          \ 相关项类型名称 (str, default: \"threads\")\n    :return: 格式化报告字符串\n    \"\"\"\
          \n    \n    item_type = ''\n    item_str = ''\n    if type == 'net' or type\
          \ == 'epoll':\n        pods = analysis.get(\"related\", [])\n        if\
          \ len(pods) > 0 :\n            pods_str = \", \".join(pods)\n          \
          \  item_str += f\"{pods_str}. The RTT raised about 20% than 0.05s over 20%\
          \ time samples. \"\n        else:\n            item_str = 'The RTT is normal.'\n\
          \    else:\n        item_type = 'threads'\n\n        threads = analysis.get(\"\
          related\", [])\n        threads_str = \", \".join(threads)\n        if len(threads_str)\
          \ > 0:\n            item_str += threads_str + \". \"\n\n    related_str\
          \ = ''\n    if len(item_str) > 0:\n        if type == 'net' or type == 'epoll':\n\
          \            related_str = item_str\n        else:\n            related_str\
          \ = f\"The most related {item_type} are {item_str} \"\n    \n    return\
          \ f\"There are {len(analysis['abnormalAnalysis'])} abnormal threads. \"\
          \ + related_str\n    "
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: NET analyze
        type: code
        variables:
        - value_selector:
          - '17441926217060'
          - result
          variable: data_json
        - value_selector:
          - '17442560822670'
          - result
          variable: proof_json
      height: 53
      id: '17443357536900'
      position:
        x: 3969
        y: 904
      positionAbsolute:
        x: 3969
        y: 904
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\n\ndef main(data_json: str, proof_json: str, type='file')\
          \ -> dict:\n    data = json.loads(data_json)\n    proof_data = json.loads(proof_json)\n\
          \    \n    analysis = analyze_abnormal_data(data, proof_data, type)\n  \
          \  summary = get_summary(analysis=analysis, type=type)\n\n    analysis['summary']\
          \ = summary\n    return {\n        \"result\": json.dumps(analysis)\n  \
          \  }\n\ndef analyze_abnormal_data(abnormal_data, proof_data, type: str)\
          \ -> dict:\n    if len(abnormal_data) == 0:\n        return {}\n    \n \
          \   if type == 'net' or type == 'epoll':\n        return net_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n    elif type == 'runq':\n        return runq_analyze(abnormal_data=abnormal_data)\n\
          \    else:\n        return consistent_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n\n\ndef consistent_analyze(abnormal_data: list,\
          \ proof_data: dict) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    timeseries = proof_data.get('data', {}).get('timeseries', [])\n  \
          \  proof_chart = {}\n    if len(timeseries) > 0:\n        proof_chart =\
          \ timeseries[0].get('chart', {}).get('chartData', {})\n    related_threads\
          \ = find_similar_charts(abnormal_data=abnormal_data, proof_chart=proof_chart,\
          \ id_key='tid')    \n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related_threads\n    }\n\ndef find_similar_charts(abnormal_data,\
          \ proof_chart, id_key: str, threshold=0.8):\n    if not abnormal_data or\
          \ not proof_chart:\n        return []\n\n    def cosine_sim(a, b):\n   \
          \     dot_product = sum(x * y for x, y in zip(a, b))\n        norm_a = sum(x**2\
          \ for x in a) ** 0.5\n        norm_b = sum(y**2 for y in b) ** 0.5\n   \
          \     if norm_a == 0 or norm_b == 0:\n            return 0.0\n        return\
          \ dot_product / (norm_a * norm_b)\n\n    similar = []\n    for data in abnormal_data:\n\
          \        chart = data['chart']\n        tid = data[id_key]\n        \n \
          \       common_ts = set(chart.keys()) & set(proof_chart.keys())\n      \
          \  if not common_ts:\n            continue\n            \n        sorted_ts\
          \ = sorted(common_ts)\n        a = [chart[ts] for ts in sorted_ts]\n   \
          \     b = [proof_chart[ts] for ts in sorted_ts]\n        \n        similarity\
          \ = cosine_sim(a, b)\n        if similarity >= threshold:\n            similar.append((tid,\
          \ similarity))\n    \n    similar.sort(key=lambda x: x[1], reverse=True)\n\
          \    return [item[0] for item in similar]\n\ndef net_analyze(abnormal_data:\
          \ list, proof_data: list) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    related = []\n    for data in abnormal_data:\n        chart = data.get('chart',\
          \ {})\n\n        tid = data.get('tid', '')\n        if tid == '':\n    \
          \        continue\n\n        # find which downstream pod is related to this\
          \ thread\n        res = find_similar_charts(proof_data, chart, id_key='dst_pod')\n\
          \n        related.append({\n            'tid': tid,\n            'relatedItems':\
          \ res,\n        })\n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related\n    }\n\ndef runq_analyze(abnormal_data: list)\
          \ -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    return {\n        'abnormalAnalysis': analysis,\n    }\n\ndef get_analysis_data(abnormal_data):\n\
          \    \"\"\"Get abnormal count, chart, spikes, avg\"\"\"\n    analysis =\
          \ []\n\n    for data in abnormal_data:\n        chart = data['chart']\n\
          \        abnormal_count = data['abnormalCount']\n        unit = data['unit']\n\
          \        \n        values = sorted(chart.values(), reverse=True)\n     \
          \   spikes = values[:abnormal_count]\n        analysis.append({\n      \
          \      'tid': data['tid'],\n            'abnormalCount': abnormal_count,\n\
          \            'spikes': spikes,\n            'avg': data['avg'],\n      \
          \      'unit': unit\n        })\n\n    return analysis\n\ndef get_summary(analysis:\
          \ dict, type: str) -> str:\n    \"\"\"\n    生成异常线程报告\n    :param abnormal_count:\
          \ 异常线程数量 (int)\n    :param related_items: 相关项列表 (list)\n    :param item_type:\
          \ 相关项类型名称 (str, default: \"threads\")\n    :return: 格式化报告字符串\n    \"\"\"\
          \n    if analysis == {}:\n        good_str = f\"Thread consumption on {type}\
          \ is normal.\"\n        return 'No abnormal data was observed. ' + good_str\n\
          \    \n    item_type = ''\n    item_str = ''\n    if type == 'net' or type\
          \ == 'epoll':\n        item_type = 'downstream pods'\n        for item in\
          \ analysis.get(\"related\", []):\n            tid = item.get(\"tid\", \"\
          \")\n            if tid == '':\n                continue\n\n           \
          \ pods = item.get(\"relatedItems\", [])\n            pods = item.get(\"\
          relatedItems\", [])\n            if len(pods) == 0 :\n                continue\n\
          \    \n            pods_str = \", \".join(pods)\n            item_str +=\
          \ f\"thread {tid}: affected by {pods_str}. The RTT between them raised about\
          \ 20% over 20% time samples.\"\n            \n            \n    else:\n\
          \        item_type = 'threads'\n\n        threads = analysis.get(\"related\"\
          , [])\n        threads_str = \", \".join(threads)\n        if len(threads_str)\
          \ > 0:\n            item_str += threads_str + \". \"\n\n    related_str\
          \ = ''\n    if len(item_str) > 0:\n        related_str = f\"The most related\
          \ {item_type} are {item_str}. \"\n    return f\"There are {len(analysis['abnormalAnalysis'])}\
          \ abnormal threads. \" + related_str\n    "
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: DISK analyze
        type: code
        variables:
        - value_selector:
          - '17441926182400'
          - result
          variable: data_json
        - value_selector:
          - '17430598152780'
          - text
          variable: proof_json
      height: 53
      id: '17443357893440'
      position:
        x: 3969
        y: 812
      positionAbsolute:
        x: 3969
        y: 812
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\n\ndef main(data_json: str, proof_json: str, type='cpu')\
          \ -> dict:\n    data = json.loads(data_json)\n    proof_data = json.loads(proof_json)\n\
          \    \n    analysis = analyze_abnormal_data(data, proof_data, type)\n  \
          \  summary = get_summary(analysis=analysis, type=type)\n\n    analysis['summary']\
          \ = summary\n    return {\n        \"result\": json.dumps(analysis)\n  \
          \  }\n\ndef analyze_abnormal_data(abnormal_data, proof_data, type: str)\
          \ -> dict:\n    if len(abnormal_data) == 0:\n        return {}\n    \n \
          \   if type == 'net' or type == 'epoll':\n        return net_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n    elif type == 'runq':\n        return runq_analyze(abnormal_data=abnormal_data)\n\
          \    else:\n        return consistent_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n\n\ndef consistent_analyze(abnormal_data: list,\
          \ proof_data: dict) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    timeseries = proof_data.get('data', {}).get('timeseries', [])\n  \
          \  proof_chart = {}\n    if len(timeseries) > 0:\n        proof_chart =\
          \ timeseries[0].get('chart', {}).get('chartData', {})\n    related_threads\
          \ = find_similar_charts(abnormal_data=abnormal_data, proof_chart=proof_chart,\
          \ id_key='tid')    \n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related_threads\n    }\n\ndef find_similar_charts(abnormal_data,\
          \ proof_chart, id_key: str, threshold=0.8):\n    if not abnormal_data or\
          \ not proof_chart:\n        return []\n\n    def cosine_sim(a, b):\n   \
          \     dot_product = sum(x * y for x, y in zip(a, b))\n        norm_a = sum(x**2\
          \ for x in a) ** 0.5\n        norm_b = sum(y**2 for y in b) ** 0.5\n   \
          \     if norm_a == 0 or norm_b == 0:\n            return 0.0\n        return\
          \ dot_product / (norm_a * norm_b)\n\n    similar = []\n    for data in abnormal_data:\n\
          \        chart = data['chart']\n        tid = data[id_key]\n        \n \
          \       common_ts = set(chart.keys()) & set(proof_chart.keys())\n      \
          \  if not common_ts:\n            continue\n            \n        sorted_ts\
          \ = sorted(common_ts)\n        a = [chart[ts] for ts in sorted_ts]\n   \
          \     b = [proof_chart[ts] for ts in sorted_ts]\n        \n        similarity\
          \ = cosine_sim(a, b)\n        if similarity >= threshold:\n            similar.append((tid,\
          \ similarity))\n    \n    similar.sort(key=lambda x: x[1], reverse=True)\n\
          \    return [item[0] for item in similar]\n\ndef net_analyze(abnormal_data:\
          \ list, proof_data: list) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    related = []\n    for data in abnormal_data:\n        chart = data.get('chart',\
          \ {})\n\n        tid = data.get('tid', '')\n        if tid == '':\n    \
          \        continue\n\n        # find which downstream pod is related to this\
          \ thread\n        res = find_similar_charts(proof_data, chart, id_key='dst_pod')\n\
          \n        related.append({\n            'tid': tid,\n            'relatedItems':\
          \ res,\n        })\n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related\n    }\n\ndef runq_analyze(abnormal_data: list)\
          \ -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    return {\n        'abnormalAnalysis': analysis,\n    }\n\ndef get_analysis_data(abnormal_data):\n\
          \    \"\"\"Get abnormal count, chart, spikes, avg\"\"\"\n    analysis =\
          \ []\n\n    for data in abnormal_data:\n        chart = data['chart']\n\
          \        abnormal_count = data['abnormalCount']\n        unit = data['unit']\n\
          \        \n        values = sorted(chart.values(), reverse=True)\n     \
          \   spikes = values[:abnormal_count]\n        analysis.append({\n      \
          \      'tid': data['tid'],\n            'abnormalCount': abnormal_count,\n\
          \            'spikes': spikes,\n            'avg': data['avg'],\n      \
          \      'unit': unit\n        })\n\n    return analysis\n\ndef get_summary(analysis:\
          \ dict, type: str) -> str:\n    \"\"\"\n    生成异常线程报告\n    :param abnormal_count:\
          \ 异常线程数量 (int)\n    :param related_items: 相关项列表 (list)\n    :param item_type:\
          \ 相关项类型名称 (str, default: \"threads\")\n    :return: 格式化报告字符串\n    \"\"\"\
          \n    if analysis == {}:\n        good_str = f\"Thread consumption on {type}\
          \ is normal.\"\n        return 'No abnormal data was observed. ' + good_str\n\
          \    \n    item_type = ''\n    item_str = ''\n    if type == 'net' or type\
          \ == 'epoll':\n        item_type = 'downstream pods'\n        for item in\
          \ analysis.get(\"related\", []):\n            tid = item.get(\"tid\", \"\
          \")\n            if tid == '':\n                continue\n\n           \
          \ pods = item.get(\"relatedItems\", [])\n            pods = item.get(\"\
          relatedItems\", [])\n            if len(pods) == 0 :\n                continue\n\
          \    \n            pods_str = \", \".join(pods)\n            item_str +=\
          \ f\"thread {tid}: affected by {pods_str}. The RTT between them raised about\
          \ 20% over 20% time samples.\"\n            \n            \n    else:\n\
          \        item_type = 'threads'\n\n        threads = analysis.get(\"related\"\
          , [])\n        threads_str = \", \".join(threads)\n        if len(threads_str)\
          \ > 0:\n            item_str += threads_str + \". \"\n\n    related_str\
          \ = ''\n    if len(item_str) > 0:\n        related_str = f\"The most related\
          \ {item_type} are {item_str}. \"\n    return f\"There are {len(analysis['abnormalAnalysis'])}\
          \ abnormal threads. \" + related_str\n    "
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: CPU analyze
        type: code
        variables:
        - value_selector:
          - '1744185676164'
          - result
          variable: data_json
        - value_selector:
          - '17430595158080'
          - text
          variable: proof_json
      height: 53
      id: '17443357899060'
      position:
        x: 3969
        y: 720
      positionAbsolute:
        x: 3969
        y: 720
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\ndef format_number(num):\n    return \"{:,}\".format(num)\n\
          \ndef json_to_markdown(data, analysis_type):\n    markdown = [\n       \
          \ f\"# {analysis_type} Consumption Analysis Report\\n\",\n        \"## Executive\
          \ Summary\",\n        f\"The summary of {analysis_type} thread consumption\
          \ analysis.\\n\"\n    ]\n    \n    if 'abnormalAnalysis' in data and data['abnormalAnalysis']:\n\
          \        markdown.append(\"## Abnormal Thread Details\")\n        for analysis\
          \ in data['abnormalAnalysis']:\n            unit = analysis['unit']\n  \
          \          markdown.extend([\n                f\"### Thread {analysis['tid']}\"\
          ,\n                f\"- ​**​Abnormal data count​**​: {analysis['abnormalCount']}\"\
          ,\n                f\"- ​**​Spike values​**​: ({unit})\",\n            \
          \    *[f\"  - {format_number(spike)}{unit}\" for spike in sorted(analysis['spikes'],\
          \ reverse=True)],\n                f\"- ​**​Average consumption​**​: {format_number(round(analysis['avg'],\
          \ 2))}{unit}\",\n            ])\n            \n            markdown.append(\"\
          \\n---\\n\") \n    \n    if 'summary' in data:\n        markdown.extend([\n\
          \            \"## Final Conclusion\",\n            f\"{data['summary']}\"\
          ,\n        ])\n    \n    return \"\\n\".join(markdown)\n\ndef main(data_json:\
          \ str) -> dict:\n    data = json.loads(data_json)\n    markdown = json_to_markdown(data,\
          \ 'file')\n    return {\"result\": markdown}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: to template file
        type: code
        variables:
        - value_selector:
          - '17443357893440'
          - result
          variable: data_json
      height: 53
      id: '17443388421360'
      position:
        x: 4272
        y: 812
      positionAbsolute:
        x: 4272
        y: 812
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\ndef format_number(num):\n    return \"{:,}\".format(num)\n\
          \ndef json_to_markdown(data, analysis_type):\n    markdown = [\n       \
          \ f\"# {analysis_type} Consumption Analysis Report\\n\",\n        \"## Executive\
          \ Summary\",\n        f\"The summary of {analysis_type} thread consumption\
          \ analysis.\\n\"\n    ]\n    \n    if 'abnormalAnalysis' in data and data['abnormalAnalysis']:\n\
          \        markdown.append(\"## Abnormal Thread Details\")\n        for analysis\
          \ in data['abnormalAnalysis']:\n            unit = analysis['unit']\n  \
          \          markdown.extend([\n                f\"### Thread {analysis['tid']}\"\
          ,\n                f\"- ​**​Abnormal data count​**​: {analysis['abnormalCount']}\"\
          ,\n                f\"- ​**​Spike values​**​: ({unit})\",\n            \
          \    *[f\"  - {format_number(spike)}{unit}\" for spike in sorted(analysis['spikes'],\
          \ reverse=True)],\n                f\"- ​**​Average consumption​**​: {format_number(round(analysis['avg'],\
          \ 2))}{unit}\",\n            ])\n            \n            markdown.append(\"\
          \\n---\\n\") \n    \n    if 'summary' in data:\n        markdown.extend([\n\
          \            \"## Final Conclusion\",\n            f\"{data['summary']}\"\
          ,\n        ])\n    \n    return \"\\n\".join(markdown)\n\ndef main(data_json:\
          \ str) -> dict:\n    data = json.loads(data_json)\n    markdown = json_to_markdown(data,\
          \ 'cpu')\n    return {\"result\": markdown}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: to template cpu
        type: code
        variables:
        - value_selector:
          - '17443357899060'
          - result
          variable: data_json
      height: 53
      id: '17443388433580'
      position:
        x: 4272
        y: 720
      positionAbsolute:
        x: 4272
        y: 720
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\ndef format_number(num):\n    return \"{:,}\".format(num)\n\
          \ndef json_to_markdown(data, analysis_type):\n    markdown = [\n       \
          \ f\"# {analysis_type} Consumption Analysis Report\\n\",\n        \"## Executive\
          \ Summary\",\n        f\"The summary of {analysis_type} thread consumption\
          \ analysis.\\n\"\n    ]\n    \n    if 'abnormalAnalysis' in data and data['abnormalAnalysis']:\n\
          \        markdown.append(\"## Abnormal Thread Details\")\n        for analysis\
          \ in data['abnormalAnalysis']:\n            unit = analysis['unit']\n  \
          \          markdown.extend([\n                f\"### Thread {analysis['tid']}\"\
          ,\n                f\"- ​**​Abnormal data count​**​: {analysis['abnormalCount']}\"\
          ,\n                f\"- ​**​Spike values​**​: ({unit})\",\n            \
          \    *[f\"  - {format_number(spike)}{unit}\" for spike in sorted(analysis['spikes'],\
          \ reverse=True)],\n                f\"- ​**​Average consumption​**​: {format_number(round(analysis['avg'],\
          \ 2))}{unit}\",\n            ])\n            \n            markdown.append(\"\
          \\n---\\n\") \n    \n    if 'summary' in data:\n        markdown.extend([\n\
          \            \"## Final Conclusion\",\n            f\"{data['summary']}\"\
          ,\n        ])\n    \n    return \"\\n\".join(markdown)\n\ndef main(data_json:\
          \ str) -> dict:\n    data = json.loads(data_json)\n    markdown = json_to_markdown(data,\
          \ 'net')\n    return {\"result\": markdown}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: to template net
        type: code
        variables:
        - value_selector:
          - '17443357536900'
          - result
          variable: data_json
      height: 53
      id: '17443388438160'
      position:
        x: 4272
        y: 904
      positionAbsolute:
        x: 4272
        y: 904
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\ndef format_number(num):\n    return \"{:,}\".format(num)\n\
          \ndef json_to_markdown(data, analysis_type):\n    markdown = [\n       \
          \ f\"# {analysis_type} Consumption Analysis Report\\n\",\n        \"## Executive\
          \ Summary\",\n        f\"The summary of {analysis_type} thread consumption\
          \ analysis.\\n\"\n    ]\n    \n    if 'abnormalAnalysis' in data and data['abnormalAnalysis']:\n\
          \        markdown.append(\"## Abnormal Thread Details\")\n        for analysis\
          \ in data['abnormalAnalysis']:\n            unit = analysis['unit']\n  \
          \          markdown.extend([\n                f\"### Thread {analysis['tid']}\"\
          ,\n                f\"- ​**​Abnormal data count​**​: {analysis['abnormalCount']}\"\
          ,\n                f\"- ​**​Spike values​**​: ({unit})\",\n            \
          \    *[f\"  - {format_number(spike)}{unit}\" for spike in sorted(analysis['spikes'],\
          \ reverse=True)],\n                f\"- ​**​Average consumption​**​: {format_number(round(analysis['avg'],\
          \ 2))}{unit}\",\n            ])\n            \n            markdown.append(\"\
          \\n---\\n\") \n    \n    if 'summary' in data:\n        markdown.extend([\n\
          \            \"## Final Conclusion\",\n            f\"{data['summary']}\"\
          ,\n        ])\n    \n    return \"\\n\".join(markdown)\n\ndef main(data_json:\
          \ str) -> dict:\n    data = json.loads(data_json)\n    markdown = json_to_markdown(data,\
          \ 'runq')\n    return {\"result\": markdown}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: to template runq
        type: code
        variables:
        - value_selector:
          - '17443356883380'
          - result
          variable: data_json
      height: 53
      id: '17443388443000'
      position:
        x: 4272
        y: 996
      positionAbsolute:
        x: 4272
        y: 996
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(data_json: str) -> dict:\n    timeseries = json.loads(data_json).get('data',\
          \ {}).get('timeseries', [])\n        \n    normal = 0.05\n    filtered =\
          \ []\n    for metric in timeseries:\n        pod = metric.get('labels',\
          \ {}).get('dst_pod', '')\n        if len(pod) == 0:\n            pod = metric.get('labels',\
          \ {}).get('pid', '')\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/normal > 1.2:\n                count += 1\n\n        if\
          \ count / len(chart) >= 0.2:\n            res = {\n                \"chart\"\
          : chart,\n                \"abnormalCount\": count,\n                \"\
          dst_pod\": pod,\n                \"normal\": normal\n            }\n   \
          \         filtered.append(res)\n\n    return {\n        \"result\": json.dumps(filtered)\n\
          \    }"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: EPOLL ABNORMAL RTT
        type: code
        variables:
        - value_selector:
          - '1742798505742'
          - text
          variable: data_json
      height: 53
      id: '1744342068305'
      parentId: '1741497176064'
      position:
        x: 1163.2885127206846
        y: 673.674875984598
      positionAbsolute:
        x: 6425.744790000769
        y: 1589.674875984598
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "def main(data_json: str) -> dict:\n    timeseries = json.loads(data_json).get('data',\
          \ {}).get('timeseries', [])\n        \n    normal = 0.05\n    filtered =\
          \ []\n    for metric in timeseries:\n        pod = metric.get('labels',\
          \ {}).get('dst_pod', '')\n        if len(pod) == 0:\n            pod = metric.get('labels',\
          \ {}).get('pid', '')\n\n        chart = metric.get('chart', {}).get('chartData',\
          \ {})\n        count = 0\n        for _, value in chart.items():\n     \
          \       if value/normal > 1.2:\n                count += 1\n\n        if\
          \ count / len(chart) >= 0.2:\n            res = {\n                \"chart\"\
          : chart,\n                \"abnormalCount\": count,\n                \"\
          dst_pod\": pod,\n                \"normal\": normal\n            }\n   \
          \         filtered.append(res)\n\n    return {\n        \"result\": json.dumps(filtered)\n\
          \    }"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: NET ABNORMAL RTT
        type: code
        variables:
        - value_selector:
          - '1742547917612'
          - text
          variable: data_json
      height: 53
      id: '1744342138380'
      parentId: '1741497176064'
      position:
        x: 1183.3553424127522
        y: 574.6824876720586
      positionAbsolute:
        x: 6445.811619692837
        y: 1490.6824876720586
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\n\ndef main(data_json: str, proof_json: str, type='cpu')\
          \ -> dict:\n    data = json.loads(data_json)\n    proof_data = json.loads(proof_json)\n\
          \    \n    analysis = analyze_abnormal_data(data, proof_data, type)\n  \
          \  summary = get_summary(analysis=analysis, type=type)\n\n    analysis['summary']\
          \ = summary\n    return {\n        \"result\": json.dumps(analysis)\n  \
          \  }\n\ndef analyze_abnormal_data(abnormal_data, proof_data, type: str)\
          \ -> dict:\n    if len(abnormal_data) == 0:\n        return {}\n    \n \
          \   if type == 'net' or type == 'epoll':\n        return net_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n    elif type == 'runq':\n        return runq_analyze(abnormal_data=abnormal_data)\n\
          \    else:\n        return consistent_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n\n\ndef consistent_analyze(abnormal_data: list,\
          \ proof_data: dict) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    timeseries = proof_data.get('data', {}).get('timeseries', [])\n  \
          \  proof_chart = {}\n    if len(timeseries) > 0:\n        proof_chart =\
          \ timeseries[0].get('chart', {}).get('chartData', {})\n    related_threads\
          \ = find_similar_charts(abnormal_data=abnormal_data, proof_chart=proof_chart,\
          \ id_key='tid')    \n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related_threads\n    }\n\ndef find_similar_charts(abnormal_data,\
          \ proof_chart, id_key: str, threshold=0.8):\n    if not abnormal_data or\
          \ not proof_chart:\n        return []\n\n    def cosine_sim(a, b):\n   \
          \     dot_product = sum(x * y for x, y in zip(a, b))\n        norm_a = sum(x**2\
          \ for x in a) ** 0.5\n        norm_b = sum(y**2 for y in b) ** 0.5\n   \
          \     if norm_a == 0 or norm_b == 0:\n            return 0.0\n        return\
          \ dot_product / (norm_a * norm_b)\n\n    similar = []\n    for data in abnormal_data:\n\
          \        chart = data['chart']\n        tid = data[id_key]\n        \n \
          \       common_ts = set(chart.keys()) & set(proof_chart.keys())\n      \
          \  if not common_ts:\n            continue\n            \n        sorted_ts\
          \ = sorted(common_ts)\n        a = [chart[ts] for ts in sorted_ts]\n   \
          \     b = [proof_chart[ts] for ts in sorted_ts]\n        \n        similarity\
          \ = cosine_sim(a, b)\n        if similarity >= threshold:\n            similar.append((tid,\
          \ similarity))\n    \n    similar.sort(key=lambda x: x[1], reverse=True)\n\
          \    return [item[0] for item in similar]\n\ndef net_analyze(abnormal_data:\
          \ list, proof_data: list) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    related = []\n    for data in abnormal_data:\n        chart = data.get('chart',\
          \ {})\n\n        tid = data.get('tid', '')\n        if tid == '':\n    \
          \        continue\n\n        # find which downstream pod is related to this\
          \ thread\n        res = find_similar_charts(proof_data, chart, id_key='dst_pod')\n\
          \n        related.append({\n            'tid': tid,\n            'relatedItems':\
          \ res,\n        })\n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related\n    }\n\ndef runq_analyze(abnormal_data: list)\
          \ -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    return {\n        'abnormalAnalysis': analysis,\n    }\n\ndef get_analysis_data(abnormal_data):\n\
          \    \"\"\"Get abnormal count, chart, spikes, avg\"\"\"\n    analysis =\
          \ []\n\n    for data in abnormal_data:\n        chart = data['chart']\n\
          \        abnormal_count = data['abnormalCount']\n        unit = data['unit']\n\
          \        \n        values = sorted(chart.values(), reverse=True)\n     \
          \   spikes = values[:abnormal_count]\n        analysis.append({\n      \
          \      'tid': data['tid'],\n            'abnormalCount': abnormal_count,\n\
          \            'spikes': spikes,\n            'avg': data['avg'],\n      \
          \      'unit': unit\n        })\n\n    return analysis\n\ndef get_summary(analysis:\
          \ dict, type: str) -> str:\n    \"\"\"\n    生成异常线程报告\n    :param abnormal_count:\
          \ 异常线程数量 (int)\n    :param related_items: 相关项列表 (list)\n    :param item_type:\
          \ 相关项类型名称 (str, default: \"threads\")\n    :return: 格式化报告字符串\n    \"\"\"\
          \n    if analysis == {}:\n        good_str = f\"Thread consumption on {type}\
          \ is normal.\"\n        return 'No abnormal data was observed. ' + good_str\n\
          \    \n    item_type = ''\n    item_str = ''\n    if type == 'net' or type\
          \ == 'epoll':\n        item_type = 'downstream pods'\n        for item in\
          \ analysis.get(\"related\", []):\n            tid = item.get(\"tid\", \"\
          \")\n            if tid == '':\n                continue\n\n           \
          \ pods = item.get(\"relatedItems\", [])\n            pods = item.get(\"\
          relatedItems\", [])\n            if len(pods) == 0 :\n                continue\n\
          \    \n            pods_str = \", \".join(pods)\n            item_str +=\
          \ f\"thread {tid}: affected by {pods_str}. The RTT between them raised about\
          \ 20% over 20% time samples.\"\n            \n            \n    else:\n\
          \        item_type = 'threads'\n\n        threads = analysis.get(\"related\"\
          , [])\n        threads_str = \", \".join(threads)\n        if len(threads_str)\
          \ > 0:\n            item_str += threads_str + \". \"\n\n    related_str\
          \ = ''\n    if len(item_str) > 0:\n        related_str = f\"The most related\
          \ {item_type} are {item_str}. \"\n    return f\"There are {len(analysis['abnormalAnalysis'])}\
          \ abnormal threads. \" + related_str\n    "
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. cpu analyze
        type: code
        variables:
        - value_selector:
          - '1744206107700'
          - result
          variable: data_json
        - value_selector:
          - '1742980228913'
          - text
          variable: proof_json
      height: 53
      id: '1744342244843'
      parentId: '1741497176064'
      position:
        x: 1791.8192785924111
        y: 371.13327676062727
      positionAbsolute:
        x: 7054.275555872496
        y: 1287.1332767606273
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\n\ndef main(data_json: str, proof_json: str, type='file')\
          \ -> dict:\n    data = json.loads(data_json)\n    proof_data = json.loads(proof_json)\n\
          \    \n    analysis = analyze_abnormal_data(data, proof_data, type)\n  \
          \  summary = get_summary(analysis=analysis, type=type)\n\n    analysis['summary']\
          \ = summary\n    return {\n        \"result\": json.dumps(analysis)\n  \
          \  }\n\ndef analyze_abnormal_data(abnormal_data, proof_data, type: str)\
          \ -> dict:\n    if len(abnormal_data) == 0:\n        return {}\n    \n \
          \   if type == 'net' or type == 'epoll':\n        return net_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n    elif type == 'runq':\n        return runq_analyze(abnormal_data=abnormal_data)\n\
          \    else:\n        return consistent_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n\n\ndef consistent_analyze(abnormal_data: list,\
          \ proof_data: dict) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    timeseries = proof_data.get('data', {}).get('timeseries', [])\n  \
          \  proof_chart = {}\n    if len(timeseries) > 0:\n        proof_chart =\
          \ timeseries[0].get('chart', {}).get('chartData', {})\n    related_threads\
          \ = find_similar_charts(abnormal_data=abnormal_data, proof_chart=proof_chart,\
          \ id_key='tid')    \n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related_threads\n    }\n\ndef find_similar_charts(abnormal_data,\
          \ proof_chart, id_key: str, threshold=0.8):\n    if not abnormal_data or\
          \ not proof_chart:\n        return []\n\n    def cosine_sim(a, b):\n   \
          \     dot_product = sum(x * y for x, y in zip(a, b))\n        norm_a = sum(x**2\
          \ for x in a) ** 0.5\n        norm_b = sum(y**2 for y in b) ** 0.5\n   \
          \     if norm_a == 0 or norm_b == 0:\n            return 0.0\n        return\
          \ dot_product / (norm_a * norm_b)\n\n    similar = []\n    for data in abnormal_data:\n\
          \        chart = data['chart']\n        tid = data[id_key]\n        \n \
          \       common_ts = set(chart.keys()) & set(proof_chart.keys())\n      \
          \  if not common_ts:\n            continue\n            \n        sorted_ts\
          \ = sorted(common_ts)\n        a = [chart[ts] for ts in sorted_ts]\n   \
          \     b = [proof_chart[ts] for ts in sorted_ts]\n        \n        similarity\
          \ = cosine_sim(a, b)\n        if similarity >= threshold:\n            similar.append((tid,\
          \ similarity))\n    \n    similar.sort(key=lambda x: x[1], reverse=True)\n\
          \    return [item[0] for item in similar]\n\ndef net_analyze(abnormal_data:\
          \ list, proof_data: list) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    related = []\n    for data in abnormal_data:\n        chart = data.get('chart',\
          \ {})\n\n        tid = data.get('tid', '')\n        if tid == '':\n    \
          \        continue\n\n        # find which downstream pod is related to this\
          \ thread\n        res = find_similar_charts(proof_data, chart, id_key='dst_pod')\n\
          \n        related.append({\n            'tid': tid,\n            'relatedItems':\
          \ res,\n        })\n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related\n    }\n\ndef runq_analyze(abnormal_data: list)\
          \ -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    return {\n        'abnormalAnalysis': analysis,\n    }\n\ndef get_analysis_data(abnormal_data):\n\
          \    \"\"\"Get abnormal count, chart, spikes, avg\"\"\"\n    analysis =\
          \ []\n\n    for data in abnormal_data:\n        chart = data['chart']\n\
          \        abnormal_count = data['abnormalCount']\n        unit = data['unit']\n\
          \        \n        values = sorted(chart.values(), reverse=True)\n     \
          \   spikes = values[:abnormal_count]\n        analysis.append({\n      \
          \      'tid': data['tid'],\n            'abnormalCount': abnormal_count,\n\
          \            'spikes': spikes,\n            'avg': data['avg'],\n      \
          \      'unit': unit\n        })\n\n    return analysis\n\ndef get_summary(analysis:\
          \ dict, type: str) -> str:\n    \"\"\"\n    生成异常线程报告\n    :param abnormal_count:\
          \ 异常线程数量 (int)\n    :param related_items: 相关项列表 (list)\n    :param item_type:\
          \ 相关项类型名称 (str, default: \"threads\")\n    :return: 格式化报告字符串\n    \"\"\"\
          \n    if analysis == {}:\n        good_str = f\"Thread consumption on {type}\
          \ is normal.\"\n        return 'No abnormal data was observed. ' + good_str\n\
          \    \n    item_type = ''\n    item_str = ''\n    if type == 'net' or type\
          \ == 'epoll':\n        item_type = 'downstream pods'\n        for item in\
          \ analysis.get(\"related\", []):\n            tid = item.get(\"tid\", \"\
          \")\n            if tid == '':\n                continue\n\n           \
          \ pods = item.get(\"relatedItems\", [])\n            pods = item.get(\"\
          relatedItems\", [])\n            if len(pods) == 0 :\n                continue\n\
          \    \n            pods_str = \", \".join(pods)\n            item_str +=\
          \ f\"thread {tid}: affected by {pods_str}. The RTT between them raised about\
          \ 20% over 20% time samples.\"\n            \n            \n    else:\n\
          \        item_type = 'threads'\n\n        threads = analysis.get(\"related\"\
          , [])\n        threads_str = \", \".join(threads)\n        if len(threads_str)\
          \ > 0:\n            item_str += threads_str + \". \"\n\n    related_str\
          \ = ''\n    if len(item_str) > 0:\n        related_str = f\"The most related\
          \ {item_type} are {item_str}. \"\n    return f\"There are {len(analysis['abnormalAnalysis'])}\
          \ abnormal threads. \" + related_str\n    "
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. file analyze
        type: code
        variables:
        - value_selector:
          - '1744206199211'
          - result
          variable: data_json
        - value_selector:
          - '1742980318484'
          - text
          variable: proof_json
      height: 53
      id: '1744342309386'
      parentId: '1741497176064'
      position:
        x: 1790.2988857309501
        y: 474.870200391917
      positionAbsolute:
        x: 7052.755163011035
        y: 1390.870200391917
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\n\ndef main(data_json: str, proof_json: str, type='net')\
          \ -> dict:\n    data = json.loads(data_json)\n    proof_data = json.loads(proof_json)\n\
          \    \n    analysis = analyze_abnormal_data(data, proof_data, type)\n  \
          \  summary = get_summary(analysis=analysis, type=type)\n\n    analysis['summary']\
          \ = summary\n    return {\n        \"result\": json.dumps(analysis)\n  \
          \  }\n\ndef analyze_abnormal_data(abnormal_data, proof_data, type: str)\
          \ -> dict:\n    \n    if type == 'net' or type == 'epoll':\n        return\
          \ net_analyze(abnormal_data=abnormal_data, proof_data=proof_data)\n    elif\
          \ type == 'runq':\n        return runq_analyze(abnormal_data=abnormal_data)\n\
          \    else:\n        return consistent_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n\n\ndef consistent_analyze(abnormal_data: list,\
          \ proof_data: dict) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    timeseries = proof_data.get('data', {}).get('timeseries', [])\n  \
          \  proof_chart = {}\n    if len(timeseries) > 0:\n        proof_chart =\
          \ timeseries[0].get('chart', {}).get('chartData', {})\n    related_threads\
          \ = find_similar_charts(abnormal_data=abnormal_data, proof_chart=proof_chart,\
          \ id_key='tid')    \n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related_threads\n    }\n\ndef find_similar_charts(abnormal_data,\
          \ proof_chart, id_key: str, threshold=0.8):\n    if not abnormal_data or\
          \ not proof_chart:\n        return []\n\n    def cosine_sim(a, b):\n   \
          \     dot_product = sum(x * y for x, y in zip(a, b))\n        norm_a = sum(x**2\
          \ for x in a) ** 0.5\n        norm_b = sum(y**2 for y in b) ** 0.5\n   \
          \     if norm_a == 0 or norm_b == 0:\n            return 0.0\n        return\
          \ dot_product / (norm_a * norm_b)\n\n    similar = []\n    for data in abnormal_data:\n\
          \        chart = data['chart']\n        tid = data[id_key]\n        \n \
          \       common_ts = set(chart.keys()) & set(proof_chart.keys())\n      \
          \  if not common_ts:\n            continue\n            \n        sorted_ts\
          \ = sorted(common_ts)\n        a = [chart[ts] for ts in sorted_ts]\n   \
          \     b = [proof_chart[ts] for ts in sorted_ts]\n        \n        similarity\
          \ = cosine_sim(a, b)\n        if similarity >= threshold:\n            similar.append((tid,\
          \ similarity))\n    \n    similar.sort(key=lambda x: x[1], reverse=True)\n\
          \    return [item[0] for item in similar]\n\ndef net_analyze(abnormal_data:\
          \ list, proof_data: list) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    related = []\n    for data in proof_data:\n        dst_pod = data.get('dst_pod',\
          \ '')\n        if dst_pod == '':\n            continue\n\n        related.append(dst_pod)\n\
          \    \n    return {\n        'abnormalAnalysis': analysis,\n        'related':\
          \ related\n    }\n\ndef runq_analyze(abnormal_data: list) -> dict:\n   \
          \ analysis = get_analysis_data(abnormal_data=abnormal_data)\n\n    return\
          \ {\n        'abnormalAnalysis': analysis,\n    }\n\ndef get_analysis_data(abnormal_data):\n\
          \    \"\"\"Get abnormal count, chart, spikes, avg\"\"\"\n    analysis =\
          \ []\n\n    for data in abnormal_data:\n        chart = data['chart']\n\
          \        abnormal_count = data['abnormalCount']\n        unit = data['unit']\n\
          \        \n        values = sorted(chart.values(), reverse=True)\n     \
          \   spikes = values[:abnormal_count]\n        analysis.append({\n      \
          \      'tid': data['tid'],\n            'abnormalCount': abnormal_count,\n\
          \            'spikes': spikes,\n            'avg': data['avg'],\n      \
          \      'unit': unit\n        })\n\n    return analysis\n\ndef get_summary(analysis:\
          \ dict, type: str) -> str:\n    \"\"\"\n    生成异常线程报告\n    :param abnormal_count:\
          \ 异常线程数量 (int)\n    :param related_items: 相关项列表 (list)\n    :param item_type:\
          \ 相关项类型名称 (str, default: \"threads\")\n    :return: 格式化报告字符串\n    \"\"\"\
          \n    \n    item_type = ''\n    item_str = ''\n    if type == 'net' or type\
          \ == 'epoll':\n        pods = analysis.get(\"related\", [])\n        if\
          \ len(pods) > 0 :\n            pods_str = \", \".join(pods)\n          \
          \  item_str += f\"{pods_str}. The RTT raised about 20% than 0.05s over 20%\
          \ time samples. \"\n        else:\n            item_str = 'The RTT is normal.'\n\
          \    else:\n        item_type = 'threads'\n\n        threads = analysis.get(\"\
          related\", [])\n        threads_str = \", \".join(threads)\n        if len(threads_str)\
          \ > 0:\n            item_str += threads_str + \". \"\n\n    related_str\
          \ = ''\n    if len(item_str) > 0:\n        if type == 'net' or type == 'epoll':\n\
          \            related_str = item_str\n        else:\n            related_str\
          \ = f\"The most related {item_type} are {item_str} \"\n    \n    return\
          \ f\"There are {len(analysis['abnormalAnalysis'])} abnormal threads. \"\
          \ + related_str\n    "
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. net analyze
        type: code
        variables:
        - value_selector:
          - '1744206249528'
          - result
          variable: data_json
        - value_selector:
          - '1744342138380'
          - result
          variable: proof_json
      height: 53
      id: '1744342372882'
      parentId: '1741497176064'
      position:
        x: 2092.972416533212
        y: 575.9896449249493
      positionAbsolute:
        x: 7355.428693813296
        y: 1491.9896449249493
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\n\ndef main(data_json: str, proof_json: str, type='epoll')\
          \ -> dict:\n    data = json.loads(data_json)\n    proof_data = json.loads(proof_json)\n\
          \    \n    analysis = analyze_abnormal_data(data, proof_data, type)\n  \
          \  summary = get_summary(analysis=analysis, type=type)\n\n    analysis['summary']\
          \ = summary\n    return {\n        \"result\": json.dumps(analysis)\n  \
          \  }\n\ndef analyze_abnormal_data(abnormal_data, proof_data, type: str)\
          \ -> dict:\n    \n    if type == 'net' or type == 'epoll':\n        return\
          \ net_analyze(abnormal_data=abnormal_data, proof_data=proof_data)\n    elif\
          \ type == 'runq':\n        return runq_analyze(abnormal_data=abnormal_data)\n\
          \    else:\n        return consistent_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n\n\ndef consistent_analyze(abnormal_data: list,\
          \ proof_data: dict) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    timeseries = proof_data.get('data', {}).get('timeseries', [])\n  \
          \  proof_chart = {}\n    if len(timeseries) > 0:\n        proof_chart =\
          \ timeseries[0].get('chart', {}).get('chartData', {})\n    related_threads\
          \ = find_similar_charts(abnormal_data=abnormal_data, proof_chart=proof_chart,\
          \ id_key='tid')    \n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related_threads\n    }\n\ndef find_similar_charts(abnormal_data,\
          \ proof_chart, id_key: str, threshold=0.8):\n    if not abnormal_data or\
          \ not proof_chart:\n        return []\n\n    def cosine_sim(a, b):\n   \
          \     dot_product = sum(x * y for x, y in zip(a, b))\n        norm_a = sum(x**2\
          \ for x in a) ** 0.5\n        norm_b = sum(y**2 for y in b) ** 0.5\n   \
          \     if norm_a == 0 or norm_b == 0:\n            return 0.0\n        return\
          \ dot_product / (norm_a * norm_b)\n\n    similar = []\n    for data in abnormal_data:\n\
          \        chart = data['chart']\n        tid = data[id_key]\n        \n \
          \       common_ts = set(chart.keys()) & set(proof_chart.keys())\n      \
          \  if not common_ts:\n            continue\n            \n        sorted_ts\
          \ = sorted(common_ts)\n        a = [chart[ts] for ts in sorted_ts]\n   \
          \     b = [proof_chart[ts] for ts in sorted_ts]\n        \n        similarity\
          \ = cosine_sim(a, b)\n        if similarity >= threshold:\n            similar.append((tid,\
          \ similarity))\n    \n    similar.sort(key=lambda x: x[1], reverse=True)\n\
          \    return [item[0] for item in similar]\n\ndef net_analyze(abnormal_data:\
          \ list, proof_data: list) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    related = []\n    for data in proof_data:\n        dst_pod = data.get('dst_pod',\
          \ '')\n        if dst_pod == '':\n            continue\n\n        related.append(dst_pod)\n\
          \    \n    return {\n        'abnormalAnalysis': analysis,\n        'related':\
          \ related\n    }\n\ndef runq_analyze(abnormal_data: list) -> dict:\n   \
          \ analysis = get_analysis_data(abnormal_data=abnormal_data)\n\n    return\
          \ {\n        'abnormalAnalysis': analysis,\n    }\n\ndef get_analysis_data(abnormal_data):\n\
          \    \"\"\"Get abnormal count, chart, spikes, avg\"\"\"\n    analysis =\
          \ []\n\n    for data in abnormal_data:\n        chart = data['chart']\n\
          \        abnormal_count = data['abnormalCount']\n        unit = data['unit']\n\
          \        \n        values = sorted(chart.values(), reverse=True)\n     \
          \   spikes = values[:abnormal_count]\n        analysis.append({\n      \
          \      'tid': data['tid'],\n            'abnormalCount': abnormal_count,\n\
          \            'spikes': spikes,\n            'avg': data['avg'],\n      \
          \      'unit': unit\n        })\n\n    return analysis\n\ndef get_summary(analysis:\
          \ dict, type: str) -> str:\n    \"\"\"\n    生成异常线程报告\n    :param abnormal_count:\
          \ 异常线程数量 (int)\n    :param related_items: 相关项列表 (list)\n    :param item_type:\
          \ 相关项类型名称 (str, default: \"threads\")\n    :return: 格式化报告字符串\n    \"\"\"\
          \n    \n    item_type = ''\n    item_str = ''\n    if type == 'net' or type\
          \ == 'epoll':\n        pods = analysis.get(\"related\", [])\n        if\
          \ len(pods) > 0 :\n            pods_str = \", \".join(pods)\n          \
          \  item_str += f\"{pods_str}. The RTT raised about 20% than 0.05s over 20%\
          \ time samples. \"\n        else:\n            item_str = 'The RTT is normal.'\n\
          \    else:\n        item_type = 'threads'\n\n        threads = analysis.get(\"\
          related\", [])\n        threads_str = \", \".join(threads)\n        if len(threads_str)\
          \ > 0:\n            item_str += threads_str + \". \"\n\n    related_str\
          \ = ''\n    if len(item_str) > 0:\n        if type == 'net' or type == 'epoll':\n\
          \            related_str = item_str\n        else:\n            related_str\
          \ = f\"The most related {item_type} are {item_str} \"\n    \n    return\
          \ f\"There are {len(analysis['abnormalAnalysis'])} abnormal threads. \"\
          \ + related_str\n    "
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. epoll analyze
        type: code
        variables:
        - value_selector:
          - '1744206286177'
          - result
          variable: data_json
        - value_selector:
          - '1744342068305'
          - result
          variable: proof_json
      height: 53
      id: '1744342426374'
      parentId: '1741497176064'
      position:
        x: 2092.4007677668633
        y: 673.2187341513443
      positionAbsolute:
        x: 7354.857045046948
        y: 1589.2187341513443
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\n\ndef main(data_json: str, proof_json: str, type='cpu')\
          \ -> dict:\n    data = json.loads(data_json)\n    proof_data = json.loads(proof_json)\n\
          \    \n    analysis = analyze_abnormal_data(data, proof_data, type)\n  \
          \  summary = get_summary(analysis=analysis, type=type)\n\n    analysis['summary']\
          \ = summary\n    return {\n        \"result\": json.dumps(analysis)\n  \
          \  }\n\ndef analyze_abnormal_data(abnormal_data, proof_data, type: str)\
          \ -> dict:\n    if len(abnormal_data) == 0:\n        return {}\n    \n \
          \   if type == 'net' or type == 'epoll':\n        return net_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n    elif type == 'runq':\n        return runq_analyze(abnormal_data=abnormal_data)\n\
          \    else:\n        return consistent_analyze(abnormal_data=abnormal_data,\
          \ proof_data=proof_data)\n\n\ndef consistent_analyze(abnormal_data: list,\
          \ proof_data: dict) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    timeseries = proof_data.get('data', {}).get('timeseries', [])\n  \
          \  proof_chart = {}\n    if len(timeseries) > 0:\n        proof_chart =\
          \ timeseries[0].get('chart', {}).get('chartData', {})\n    related_threads\
          \ = find_similar_charts(abnormal_data=abnormal_data, proof_chart=proof_chart,\
          \ id_key='tid')    \n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related_threads\n    }\n\ndef find_similar_charts(abnormal_data,\
          \ proof_chart, id_key: str, threshold=0.8):\n    if not abnormal_data or\
          \ not proof_chart:\n        return []\n\n    def cosine_sim(a, b):\n   \
          \     dot_product = sum(x * y for x, y in zip(a, b))\n        norm_a = sum(x**2\
          \ for x in a) ** 0.5\n        norm_b = sum(y**2 for y in b) ** 0.5\n   \
          \     if norm_a == 0 or norm_b == 0:\n            return 0.0\n        return\
          \ dot_product / (norm_a * norm_b)\n\n    similar = []\n    for data in abnormal_data:\n\
          \        chart = data['chart']\n        tid = data[id_key]\n        \n \
          \       common_ts = set(chart.keys()) & set(proof_chart.keys())\n      \
          \  if not common_ts:\n            continue\n            \n        sorted_ts\
          \ = sorted(common_ts)\n        a = [chart[ts] for ts in sorted_ts]\n   \
          \     b = [proof_chart[ts] for ts in sorted_ts]\n        \n        similarity\
          \ = cosine_sim(a, b)\n        if similarity >= threshold:\n            similar.append((tid,\
          \ similarity))\n    \n    similar.sort(key=lambda x: x[1], reverse=True)\n\
          \    return [item[0] for item in similar]\n\ndef net_analyze(abnormal_data:\
          \ list, proof_data: list) -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    related = []\n    for data in abnormal_data:\n        chart = data.get('chart',\
          \ {})\n\n        tid = data.get('tid', '')\n        if tid == '':\n    \
          \        continue\n\n        # find which downstream pod is related to this\
          \ thread\n        res = find_similar_charts(proof_data, chart, id_key='dst_pod')\n\
          \n        related.append({\n            'tid': tid,\n            'relatedItems':\
          \ res,\n        })\n    \n    return {\n        'abnormalAnalysis': analysis,\n\
          \        'related': related\n    }\n\ndef runq_analyze(abnormal_data: list)\
          \ -> dict:\n    analysis = get_analysis_data(abnormal_data=abnormal_data)\n\
          \n    return {\n        'abnormalAnalysis': analysis,\n    }\n\ndef get_analysis_data(abnormal_data):\n\
          \    \"\"\"Get abnormal count, chart, spikes, avg\"\"\"\n    analysis =\
          \ []\n\n    for data in abnormal_data:\n        chart = data['chart']\n\
          \        abnormal_count = data['abnormalCount']\n        unit = data['unit']\n\
          \        \n        values = sorted(chart.values(), reverse=True)\n     \
          \   spikes = values[:abnormal_count]\n        analysis.append({\n      \
          \      'tid': data['tid'],\n            'abnormalCount': abnormal_count,\n\
          \            'spikes': spikes,\n            'avg': data['avg'],\n      \
          \      'unit': unit\n        })\n\n    return analysis\n\ndef get_summary(analysis:\
          \ dict, type: str) -> str:\n    \"\"\"\n    生成异常线程报告\n    :param abnormal_count:\
          \ 异常线程数量 (int)\n    :param related_items: 相关项列表 (list)\n    :param item_type:\
          \ 相关项类型名称 (str, default: \"threads\")\n    :return: 格式化报告字符串\n    \"\"\"\
          \n    if analysis == {}:\n        good_str = f\"Thread consumption on {type}\
          \ is normal.\"\n        return 'No abnormal data was observed. ' + good_str\n\
          \    \n    item_type = ''\n    item_str = ''\n    if type == 'net' or type\
          \ == 'epoll':\n        item_type = 'downstream pods'\n        for item in\
          \ analysis.get(\"related\", []):\n            tid = item.get(\"tid\", \"\
          \")\n            if tid == '':\n                continue\n\n           \
          \ pods = item.get(\"relatedItems\", [])\n            pods = item.get(\"\
          relatedItems\", [])\n            if len(pods) == 0 :\n                continue\n\
          \    \n            pods_str = \", \".join(pods)\n            item_str +=\
          \ f\"thread {tid}: affected by {pods_str}. The RTT between them raised about\
          \ 20% over 20% time samples.\"\n            \n            \n    else:\n\
          \        item_type = 'threads'\n\n        threads = analysis.get(\"related\"\
          , [])\n        threads_str = \", \".join(threads)\n        if len(threads_str)\
          \ > 0:\n            item_str += threads_str + \". \"\n\n    related_str\
          \ = ''\n    if len(item_str) > 0:\n        related_str = f\"The most related\
          \ {item_type} are {item_str}. \"\n    return f\"There are {len(analysis['abnormalAnalysis'])}\
          \ abnormal threads. \" + related_str\n    "
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. runq analyze
        type: code
        variables:
        - value_selector:
          - '1744206314118'
          - result
          variable: data_json
        - value_selector:
          - '17430610756270'
          - text
          variable: proof_json
      height: 53
      id: '1744342478278'
      parentId: '1741497176064'
      position:
        x: 1768.3401312758333
        y: 804.853363697991
      positionAbsolute:
        x: 7030.796408555918
        y: 1720.853363697991
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\ndef format_number(num):\n    return \"{:,}\".format(num)\n\
          \ndef json_to_markdown(data, analysis_type):\n    markdown = [\n       \
          \ f\"# {analysis_type} Consumption Analysis Report\\n\",\n        \"## Executive\
          \ Summary\",\n        f\"The summary of {analysis_type} thread consumption\
          \ analysis.\\n\"\n    ]\n    \n    if 'abnormalAnalysis' in data and data['abnormalAnalysis']:\n\
          \        markdown.append(\"## Abnormal Thread Details\")\n        for analysis\
          \ in data['abnormalAnalysis']:\n            unit = analysis['unit']\n  \
          \          markdown.extend([\n                f\"### Thread {analysis['tid']}\"\
          ,\n                f\"- ​**​Abnormal data count​**​: {analysis['abnormalCount']}\"\
          ,\n                f\"- ​**​Spike values​**​: ({unit})\",\n            \
          \    *[f\"  - {format_number(spike)}{unit}\" for spike in sorted(analysis['spikes'],\
          \ reverse=True)],\n                f\"- ​**​Average consumption​**​: {format_number(round(analysis['avg'],\
          \ 2))}{unit}\",\n            ])\n            \n            markdown.append(\"\
          \\n---\\n\") \n    \n    if 'summary' in data:\n        markdown.extend([\n\
          \            \"## Final Conclusion\",\n            f\"{data['summary']}\"\
          ,\n        ])\n    \n    return \"\\n\".join(markdown)\n\ndef main(data_json:\
          \ str) -> dict:\n    data = json.loads(data_json)\n    markdown = json_to_markdown(data,\
          \ 'runq')\n    return {\"result\": markdown}"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. to template runq
        type: code
        variables:
        - value_selector:
          - '1744342478278'
          - result
          variable: data_json
      height: 53
      id: '1744342609856'
      parentId: '1741497176064'
      position:
        x: 2071.3401312758333
        y: 804.853363697991
      positionAbsolute:
        x: 7333.796408555918
        y: 1720.853363697991
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\ndef format_number(num):\n    return \"{:,}\".format(num)\n\
          \ndef json_to_markdown(data, analysis_type):\n    markdown = [\n       \
          \ f\"# {analysis_type} Consumption Analysis Report\\n\",\n        \"## Executive\
          \ Summary\",\n        f\"The summary of {analysis_type} thread consumption\
          \ analysis.\\n\"\n    ]\n    \n    if 'abnormalAnalysis' in data and data['abnormalAnalysis']:\n\
          \        markdown.append(\"## Abnormal Thread Details\")\n        for analysis\
          \ in data['abnormalAnalysis']:\n            unit = analysis['unit']\n  \
          \          markdown.extend([\n                f\"### Thread {analysis['tid']}\"\
          ,\n                f\"- ​**​Abnormal data count​**​: {analysis['abnormalCount']}\"\
          ,\n                f\"- ​**​Spike values​**​: ({unit})\",\n            \
          \    *[f\"  - {format_number(spike)}{unit}\" for spike in sorted(analysis['spikes'],\
          \ reverse=True)],\n                f\"- ​**​Average consumption​**​: {format_number(round(analysis['avg'],\
          \ 2))}{unit}\",\n            ])\n            \n            markdown.append(\"\
          \\n---\\n\") \n    \n    if 'summary' in data:\n        markdown.extend([\n\
          \            \"## Final Conclusion\",\n            f\"{data['summary']}\"\
          ,\n        ])\n    \n    return \"\\n\".join(markdown)\n\ndef main(data_json:\
          \ str) -> dict:\n    data = json.loads(data_json)\n    markdown = json_to_markdown(data,\
          \ 'net')\n    return {\"result\": markdown}"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. to template epoll
        type: code
        variables:
        - value_selector:
          - '1744342426374'
          - result
          variable: data_json
      height: 53
      id: '1744342800777'
      parentId: '1741497176064'
      position:
        x: 2396.2516631873705
        y: 671.1408594726702
      positionAbsolute:
        x: 7658.707940467455
        y: 1587.1408594726702
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\ndef format_number(num):\n    return \"{:,}\".format(num)\n\
          \ndef json_to_markdown(data, analysis_type):\n    markdown = [\n       \
          \ f\"# {analysis_type} Consumption Analysis Report\\n\",\n        \"## Executive\
          \ Summary\",\n        f\"The summary of {analysis_type} thread consumption\
          \ analysis.\\n\"\n    ]\n    \n    if 'abnormalAnalysis' in data and data['abnormalAnalysis']:\n\
          \        markdown.append(\"## Abnormal Thread Details\")\n        for analysis\
          \ in data['abnormalAnalysis']:\n            unit = analysis['unit']\n  \
          \          markdown.extend([\n                f\"### Thread {analysis['tid']}\"\
          ,\n                f\"- ​**​Abnormal data count​**​: {analysis['abnormalCount']}\"\
          ,\n                f\"- ​**​Spike values​**​: ({unit})\",\n            \
          \    *[f\"  - {format_number(spike)}{unit}\" for spike in sorted(analysis['spikes'],\
          \ reverse=True)],\n                f\"- ​**​Average consumption​**​: {format_number(round(analysis['avg'],\
          \ 2))}{unit}\",\n            ])\n            \n            markdown.append(\"\
          \\n---\\n\") \n    \n    if 'summary' in data:\n        markdown.extend([\n\
          \            \"## Final Conclusion\",\n            f\"{data['summary']}\"\
          ,\n        ])\n    \n    return \"\\n\".join(markdown)\n\ndef main(data_json:\
          \ str) -> dict:\n    data = json.loads(data_json)\n    markdown = json_to_markdown(data,\
          \ 'net')\n    return {\"result\": markdown}"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. to template net
        type: code
        variables:
        - value_selector:
          - '1744342372882'
          - result
          variable: data_json
      height: 53
      id: '1744342846753'
      parentId: '1741497176064'
      position:
        x: 2397.0575190597137
        y: 576.2913937324586
      positionAbsolute:
        x: 7659.513796339798
        y: 1492.2913937324586
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\ndef format_number(num):\n    return \"{:,}\".format(num)\n\
          \ndef json_to_markdown(data, analysis_type):\n    markdown = [\n       \
          \ f\"# {analysis_type} Consumption Analysis Report\\n\",\n        \"## Executive\
          \ Summary\",\n        f\"The summary of {analysis_type} thread consumption\
          \ analysis.\\n\"\n    ]\n    \n    if 'abnormalAnalysis' in data and data['abnormalAnalysis']:\n\
          \        markdown.append(\"## Abnormal Thread Details\")\n        for analysis\
          \ in data['abnormalAnalysis']:\n            unit = analysis['unit']\n  \
          \          markdown.extend([\n                f\"### Thread {analysis['tid']}\"\
          ,\n                f\"- ​**​Abnormal data count​**​: {analysis['abnormalCount']}\"\
          ,\n                f\"- ​**​Spike values​**​: ({unit})\",\n            \
          \    *[f\"  - {format_number(spike)}{unit}\" for spike in sorted(analysis['spikes'],\
          \ reverse=True)],\n                f\"- ​**​Average consumption​**​: {format_number(round(analysis['avg'],\
          \ 2))}{unit}\",\n            ])\n            \n            markdown.append(\"\
          \\n---\\n\") \n    \n    if 'summary' in data:\n        markdown.extend([\n\
          \            \"## Final Conclusion\",\n            f\"{data['summary']}\"\
          ,\n        ])\n    \n    return \"\\n\".join(markdown)\n\ndef main(data_json:\
          \ str) -> dict:\n    data = json.loads(data_json)\n    markdown = json_to_markdown(data,\
          \ 'net')\n    return {\"result\": markdown}"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. to template file
        type: code
        variables:
        - value_selector:
          - '1744342309386'
          - result
          variable: data_json
      height: 53
      id: '1744342890395'
      parentId: '1741497176064'
      position:
        x: 2298.297497136483
        y: 475.73311174167225
      positionAbsolute:
        x: 7560.7537744165675
        y: 1391.7331117416722
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "import json\n\ndef format_number(num):\n    return \"{:,}\".format(num)\n\
          \ndef json_to_markdown(data, analysis_type):\n    markdown = [\n       \
          \ f\"# {analysis_type} Consumption Analysis Report\\n\",\n        \"## Executive\
          \ Summary\",\n        f\"The summary of {analysis_type} thread consumption\
          \ analysis.\\n\"\n    ]\n    \n    if 'abnormalAnalysis' in data and data['abnormalAnalysis']:\n\
          \        markdown.append(\"## Abnormal Thread Details\")\n        for analysis\
          \ in data['abnormalAnalysis']:\n            unit = analysis['unit']\n  \
          \          markdown.extend([\n                f\"### Thread {analysis['tid']}\"\
          ,\n                f\"- ​**​Abnormal data count​**​: {analysis['abnormalCount']}\"\
          ,\n                f\"- ​**​Spike values​**​: ({unit})\",\n            \
          \    *[f\"  - {format_number(spike)}{unit}\" for spike in sorted(analysis['spikes'],\
          \ reverse=True)],\n                f\"- ​**​Average consumption​**​: {format_number(round(analysis['avg'],\
          \ 2))}{unit}\",\n            ])\n            \n            markdown.append(\"\
          \\n---\\n\") \n    \n    if 'summary' in data:\n        markdown.extend([\n\
          \            \"## Final Conclusion\",\n            f\"{data['summary']}\"\
          ,\n        ])\n    \n    return \"\\n\".join(markdown)\n\ndef main(data_json:\
          \ str) -> dict:\n    data = json.loads(data_json)\n    markdown = json_to_markdown(data,\
          \ 'net')\n    return {\"result\": markdown}"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1741497176064'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: it. to template cpu
        type: code
        variables:
        - value_selector:
          - '1744342244843'
          - result
          variable: data_json
      height: 53
      id: '1744342920172'
      parentId: '1741497176064'
      position:
        x: 2291.073286368818
        y: 355.5973351437458
      positionAbsolute:
        x: 7553.529563648903
        y: 1271.5973351437458
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    viewport:
      x: -1671.1109248685862
      y: -226.66015559610764
      zoom: 0.3298769776932242
